import{s as f,ac as c,ao as E,e5 as q,ci as P,i as y,ad as _,l as R,bd as I,k as b}from"./index-CExwPuvJ.js";import{u as $,l as j}from"./featureConversionUtils-BLyAizAe.js";import{u as N}from"./executeQueryForSnapping-aPE126mz.js";import{f as O}from"./FeatureStore-D6LxqiGz.js";import{x as Q,j as k}from"./queryUtils-CqIOADIe.js";import{L}from"./QueryEngine-B1Q-LYgY.js";import{E as M,N as A}from"./geojson-DzJ5uEOp.js";import{d as U}from"./sourceUtils-BTjNuQ3m.js";import{o as Z,e as v,K as g}from"./wfsUtils-kTTRFXgQ.js";import{Z as J}from"./FieldsIndex-DWsBKicL.js";import"./OptimizedFeature-UwdC5Tnb.js";import"./memoryEstimations-BAc5S_21.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./timeSupport-J03OKCKy.js";import"./BoundsStore-BlEGmlGm.js";import"./PooledRBush-BZgBVfOA.js";import"./optimizedFeatureQueryEngineAdapter-BfFTbuDK.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-qKQzF3xz.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./WhereClause-2ARSp7jq.js";import"./TimeOnly-DH2biFcw.js";import"./enum-sbmN7i4Z.js";import"./UnknownTimeZone-D_KOh46l.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-DoeIb5tk.js";import"./utils-Dwk_-7HX.js";import"./heatmapUtils-B6jL6VpF.js";import"./vec42-C58QokUh.js";import"./vec4f64-DPb6J-GU.js";import"./utils-C0coN_wJ.js";import"./utils-D4HjROXp.js";import"./ClassBreaksDefinition-BP02PYbg.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-DoD7RNAq.js";import"./NormalizationBinParametersMixin-BLwYo7Yg.js";import"./date-DCujAECq.js";import"./xmlUtils-CtUoQO7q.js";const x="esri.layers.WFSLayer";class $t{constructor(){this._customParameters=null,this._queryEngine=null,this._supportsPagination=!0}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(e,t={}){const{getFeatureUrl:a,getFeatureOutputFormat:s,fields:n,geometryType:u,featureType:o,maxRecordCount:i,maxTotalRecordCount:h,maxPageCount:w,objectIdField:d,customParameters:F}=e,{spatialReference:m,getFeatureSpatialReference:p}=Z(a,o,e.spatialReference);try{await Q(p,m)}catch{throw new f("unsupported-projection","Projection not supported",{inSpatialReference:p,outSpatialReference:m})}c(t),this._customParameters=F,this._featureType=o,this._fieldsIndex=J.fromLayerJSON({fields:n,dateFieldsTimeReference:n.some((T=>T.type==="esriFieldTypeDate"))?{timeZoneIANA:E}:null}),this._geometryType=u,this._getFeatureUrl=a,this._getFeatureOutputFormat=s,this._getFeatureSpatialReference=p,this._maxRecordCount=i,this._maxTotalRecordCount=h,this._maxPageCount=w,this._objectIdField=d,this._spatialReference=m;let l=await this._snapshotFeatures(t);if(l.errors.length>0&&(this._supportsPagination=!1,l=await this._snapshotFeatures(t),l.errors.length>0))throw l.errors[0];const S={type:"object-id",fieldName:d};return this._queryEngine=new L({fieldsIndex:this._fieldsIndex,geometryType:u,hasM:!1,hasZ:!1,featureIdInfo:S,spatialReference:m,timeInfo:null,featureStore:new O({geometryType:u,hasM:!1,hasZ:!1})}),this._queryEngine.featureStore.addMany(l.features),{warnings:C(l),extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new f("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),(await this._queryEngine.executeQueryForIds(e,t.signal)).filter(q)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),N(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){return this._customParameters=e.customParameters,this._maxRecordCount=e.maxRecordCount,this._maxTotalRecordCount=e.maxTotalRecordCount,this._maxPageCount=e.maxPageCount,this._snapshotTask?.abort(),this._snapshotTask=P((t=>this._snapshotFeatures({signal:t}))),this._snapshotTask.promise.then((t=>{this._queryEngine.featureStore.clear(),this._queryEngine.featureStore.addMany(t.features);for(const a of C(t))y.getLogger(x).warn(new _("wfs-layer:refresh-warning",a.message,a.details));t.errors?.length&&y.getLogger(x).warn(new _("wfs-layer:refresh-error","Refresh completed with errors",{errors:t.errors}))}),(()=>{this._queryEngine.featureStore.clear()})),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _snapshotFeatures(e){const t=e?.signal,a=this._maxTotalRecordCount,s=this._maxPageCount,n=this._supportsPagination&&s>1?await v(this._getFeatureUrl,this._featureType.typeName,{customParameters:this._customParameters,signal:t}):void 0;let u=[];const o=[];if(n==null)try{u=await this._singleQuery(t)}catch(i){R(i)||o.push(i)}else{const i=Math.min(n,a),h=G(this,I(Math.ceil(i/this._maxRecordCount),1,s),t);await Promise.allSettled(Array.from({length:10}).map((()=>W(h,u,o))))}return c(t),{features:u,totalRecordCount:n,maxTotalRecordCount:a,maxPageCount:s,errors:o}}async _singleQuery(e){const t=Number.isFinite(this._maxRecordCount)&&this._maxRecordCount>0?this._maxRecordCount:void 0,a=await g(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,count:t,signal:e});return this._processGeoJSON(a,{signal:e})}async _pageQuery(e,t){const a=e*this._maxRecordCount,s=await g(this._getFeatureUrl,this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,startIndex:a,count:this._maxRecordCount,signal:t});return this._processGeoJSON(s,{startIndex:a,signal:t})}_processGeoJSON(e,t){M(e,this._getFeatureSpatialReference.wkid);const{startIndex:a,signal:s}=t;c(s);const n=A(e,{geometryType:this._geometryType,hasZ:!1,objectIdField:this._objectIdField});if(!b(this._spatialReference,this._getFeatureSpatialReference))for(const o of n)o.geometry!=null&&(o.geometry=$(k(j(o.geometry,this._geometryType,!1,!1),this._getFeatureSpatialReference,this._spatialReference)));let u=a??1;for(const o of n){const i={};U(this._fieldsIndex,i,o.attributes,!0),o.attributes=i,i[this._objectIdField]==null&&(o.objectId=i[this._objectIdField]=u++)}return n}}function*G(r,e,t){for(let a=0;a<e;a++)yield r._pageQuery(a,t)}async function W(r,e,t){let a=r.next();for(;!a.done;){try{const s=await a.value;e.push(...s)}catch(s){R(s)||t.push(s)}a=r.next()}}function C(r){const e=[];return r.totalRecordCount!=null&&(r.features.length<r.totalRecordCount&&e.push({name:"wfs-layer:maxRecordCount-too-low",message:`Could only fetch ${r.features.length} of ${r.totalRecordCount} in ${r.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount}}),r.totalRecordCount>r.maxTotalRecordCount&&e.push({name:"wfs-layer:large-dataset",message:`The number of ${r.totalRecordCount} features exceeds the maximum allowed of ${r.maxTotalRecordCount}.`,details:{recordCount:r.features.length,totalRecordCount:r.totalRecordCount,maxTotalRecordCount:r.maxTotalRecordCount}})),e}export{$t as default};
