import{n as s,u as n,v as l,w as m,s as u,fZ as h,f as d,y as c,e5 as y}from"./index-CExwPuvJ.js";import{n as _,c as g}from"./FeatureLayerView2D-D8HiClq7.js";import{d as f}from"./FeatureFilter-BSEENYK2.js";import"./Container-DkcVqL9w.js";import"./featureConversionUtils-BLyAizAe.js";import"./OptimizedFeature-UwdC5Tnb.js";import"./memoryEstimations-BAc5S_21.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./labelingInfo-BRW1sh9G.js";import"./SimpleRenderer-BAU5yJ_E.js";import"./commonProperties-Cir4TXlh.js";import"./colorRamps-b1BYl0lI.js";import"./ColorStop-B7gj_z9i.js";import"./visualVariableUtils-xAbbuuJf.js";import"./jsonUtils-ClPGk7Ft.js";import"./defaults3D-C8qVkuBx.js";import"./defaults-CnJSr8fk.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-D0k9tBka.js";import"./diffUtils-DOKqINpD.js";import"./RendererLegendOptions-BZcZwSqP.js";import"./styleUtils-BF1EXGms.js";import"./NormalizationBinParametersMixin-BLwYo7Yg.js";import"./labelUtils-CVrW8jE2.js";import"./timeSupport-eosZDsIC.js";import"./AttributeBinsFeatureSet-BurERxjJ.js";import"./AttributeBinsQuery-PbggBCIN.js";import"./queryUtils-CqIOADIe.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DoD7RNAq.js";import"./LayerView-Bw4WsyOI.js";import"./layerViewUtils-DmD0qnmT.js";import"./TechniqueInstance-604mGyS-.js";import"./UpdateTracking2D-D060plQy.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-Bn-sdLdM.js";import"./enums-Da5QEGm1.js";import"./utils-BwqxYFaA.js";import"./defaultCIMValues-B0_T2GCo.js";import"./rasterizingUtils-eIK54Etg.js";import"./floatRGBA-BIl1z3-7.js";import"./Rect-CUzevAry.js";import"./Utils-IXQ9FMq8.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-Bl-LFSqj.js";import"./ProgramTemplate-C2U4Byt7.js";import"./TileContainer-D2lt3xsa.js";import"./WGLContainer-yxKRNXGT.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-H2dD46QT.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-DX_PDYuk.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-DncdSSbR.js";import"./ShaderBuilder-B1M8h70D.js";import"./BindType-BBwFZqyN.js";import"./utils-CkLx65eQ.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-R6xkNjh-.js";import"./CircularArray-CujHzHWW.js";import"./OrderByInfo-CWXdMBI2.js";import"./heatmapUtils-B6jL6VpF.js";import"./vec42-C58QokUh.js";import"./vec4f64-DPb6J-GU.js";import"./SDFHelper-CXxq3AVr.js";import"./constants-B4mRqufT.js";import"./bundle-B2FM5W1M.js";import"./displayFilterUtils-f_40GgBU.js";import"./FeatureEffect-CdWIga2R.js";import"./floorFilterUtils-n6UOt7ty.js";import"./popupUtils-C5GBm62l.js";import"./RefreshableLayerView-B2JbZHkk.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:f})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),m((()=>this.layer.purgeOptions),(()=>this._update())),m((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new u("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map((i=>this.on(i,t))));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then((i=>i.streamMessenger.enableEvent(e,!0)));const p=super.on(e,t),a=this;return d((()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then((i=>i.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return _(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((p=>{const a=c.fromJSON(p);return a.features.forEach((i=>{i.layer=this.layer,i.sourceLayer=this.layer})),a})),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(y)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const Te=o;export{Te as default};
