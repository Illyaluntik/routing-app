import{eQ as _,eR as S,eS as T,f3 as b,a6 as w,af as v,I as O,a7 as c,fh as $,f6 as R,s as m,p as W,ck as U,e7 as P,dT as j,n as o,u as a,bq as I,bt as L,fi as k,v as A}from"./index-CaoLwbR1.js";import{S as B}from"./MultiOriginJSONSupport-BAVlqMez.js";import{i as M}from"./APIKeyMixin-DxCsFFgo.js";import{p as N}from"./ArcGISCachedService-CP3j2kXV.js";import{m as C,f as D,a as J}from"./SublayersOwner-EqBTKabP.js";import{l as q}from"./ArcGISService-DXCFIWmp.js";import{e as G}from"./CustomParametersMixin-BOMzQIEt.js";import{b as V,y as E}from"./OperationalLayer-dtYVOmPN.js";import{j as x}from"./PortalLayer-B2Bto4YX.js";import{f as H}from"./RefreshableLayer-DwXOj26-.js";import{o as y}from"./imageBitmapUtils-CyNyY-iD.js";import"./TileInfoTilemapCache-CQD0nFt7.js";import"./TilemapCache-Bg124p38.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./memoryEstimations-B2IbCRpd.js";import"./portalItemUtils-BGiFrKwk.js";import"./QueryTask-CLpalRzo.js";import"./infoFor3D-VMSlSy0z.js";import"./executeForIds-BmhFvnRZ.js";import"./query-BFcjVD8z.js";import"./pbfQueryUtils-1pzFlPHP.js";import"./pbf-CHwjgNMf.js";import"./OptimizedFeature-CpDeLxSu.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-J59eJujY.js";import"./executeQueryJSON-D8lae9AA.js";import"./featureConversionUtils-DsZpulkr.js";import"./OrderedLayer-vZYcC173.js";import"./OrderByInfo-yCjIoSBh.js";import"./labelingInfo-CBIgwnLU.js";import"./SimpleRenderer-DJsS1e5G.js";import"./commonProperties-BpvfLt2f.js";import"./colorRamps-BgxfuDFH.js";import"./ColorStop-CWqYagNl.js";import"./visualVariableUtils-B57ANmY6.js";import"./jsonUtils-C1IvpZNN.js";import"./defaults3D-ivya3xoE.js";import"./defaults-BAlE9t0U.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-Cl341lK8.js";import"./diffUtils-qt8uR2Gq.js";import"./RendererLegendOptions-nTkh6EFE.js";import"./styleUtils-Cz1vH-LF.js";import"./NormalizationBinParametersMixin-I0lm4__P.js";import"./labelUtils-CWfoqZRT.js";import"./FeatureType-V5ezYApE.js";import"./FeatureTemplate-BvEL2WCK.js";import"./FieldsIndex-BiR-AzOu.js";import"./UnknownTimeZone-7tPwvKCX.js";import"./LayerFloorInfo-C90jqDBC.js";import"./Relationship-D-StIRGH.js";import"./serviceCapabilitiesUtils-CNG_8CT0.js";import"./typeUtils-Cvpmo3c3.js";import"./ClassBreaksRenderer-BFuqZLUW.js";import"./DictionaryScriptEvaluator-D4rTqbRM.js";import"./ArcadeExpression-BLhVUkj0.js";import"./TimeOnly-CQUth33y.js";import"./enum-D0LZ-dqd.js";import"./utils-BLMWe3SZ.js";import"./defaultCIMValues-B0_T2GCo.js";import"./enums-Da5QEGm1.js";import"./heatmapUtils-D1vgNC_u.js";import"./vec42-CF-1ZD7A.js";import"./vec4f64-DPb6J-GU.js";import"./popupUtils-C3mgajjP.js";import"./sublayerUtils-1aCU_XyT.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends _(S(C(N(D(V(x(q(B(H(M(G(T)))))))))))){constructor(...e){super(...e),this.listMode="show",this.elevationInfo=new b({mode:"on-the-ground"}),this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(w).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&v.fromJSON(e)}writeSublayers(e,r,t,s){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten((({sublayers:p})=>p&&p.toArray().reverse())).toArray(),l=[],u={writeSublayerStructure:!1,...s};n.forEach((p=>{const h=p.write({},u);l.push(h)})),l.some((p=>Object.keys(p).length>1))&&(r.layers=l)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((r=>O(r).path)):null}fetchTile(e,r,t,s={}){const{signal:n}=s,l=this.getTileUrl(e,r,t),u={responseType:"image",signal:n,query:{...this.refreshParameters}};return c(l,u).then((p=>p.data))}async fetchImageBitmapTile(e,r,t,s={}){const{signal:n}=s;if(this.fetchTile!==d.prototype.fetchTile){const h=await this.fetchTile(e,r,t,s);return y(h,e,r,t,n)}const l=this.getTileUrl(e,r,t),u={responseType:"blob",signal:n,query:{...this.refreshParameters}},{data:p}=await c(l,u);return y(p,e,r,t,n)}getTileUrl(e,r,t){const s=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,n=$({...this.parsedUrl?.query,blankTile:!s&&null,...this.customParameters,token:this.apiKey}),l=this.tileServers;return`${l&&l.length?l[r%l.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${n?"?"+n:""}`}loadAll(){return R(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new m("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new m("tile-layer:undefined-url","layer's url is not defined");const s=W(this.parsedUrl.path);if(s!=null&&s.serverType==="ImageServer")throw new m("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!U(t))return this._fetchServerVersion(t,e).then((s=>{this.read({currentVersion:s})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!P(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((s=>{if(s.data?.currentVersion)return s.data.currentVersion;throw new m("tile-layer:version-not-available","Server did not provide a version")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,s=f.length;t<s;t++)if(r=f[t],r.toLowerCase().includes(e))return j("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};o([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),o([a()],i.prototype,"elevationInfo",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({type:Boolean})],i.prototype,"resampling",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({type:v})],i.prototype,"spatialReference",void 0),o([I("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),o([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),o([a({readOnly:!0})],i.prototype,"sublayers",void 0),o([L("sublayers",{layers:{type:[J]}})],i.prototype,"writeSublayers",null),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a()],i.prototype,"tileServers",null),o([k("tileServers")],i.prototype,"castTileServers",null),o([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),o([a(E)],i.prototype,"url",void 0),i=d=o([A("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const lr=i;export{lr as default};
