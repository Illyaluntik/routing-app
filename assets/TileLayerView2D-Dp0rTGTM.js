import{c as w,b as y,d as I,g as T,e as V,f as g,j as H,k as v,l as n,m as f,D as C,i as q,n as m,u as d,v as U}from"./index-B8xXt3oP.js";import"./colorUtils-CnDnniBE.js";import"./defaultCIMValues-B0_T2GCo.js";import"./enums-Da5QEGm1.js";import"./floatRGBA-BZzk8Nrj.js";import"./UpdateTracking2D-CV4lUU1P.js";import"./GeometryUtils-D5kALkvP.js";import"./defaults-Cc8aB_4Q.js";import"./OverrideHelper-CaJ2cYAx.js";import"./Container-C__vYOfg.js";import"./WGLContainer-B4lMw9sd.js";import"./Utils-D5owpkbc.js";import"./StyleDefinition-H2dD46QT.js";import"./constants-BwsikM5h.js";import"./GridShader-_ujfs8Q8.js";import"./pbf-CcBL4LRW.js";import"./TechniqueType-pk2C5RYg.js";import"./FramebufferObject-SQ5ZqeLE.js";import"./FeatureCommandQueue-CeQGVQvd.js";import"./PieChartMeshWriter-kJJv8Ri0.js";import"./constants-BFLErLYb.js";import"./TimeOnly-D91NAFNv.js";import"./UnknownTimeZone-BROmPhr1.js";import"./renderState-DC8RGhMd.js";import"./glsl-Cj7KC756.js";import"./testSVGPremultipliedAlpha-BQLZqfKt.js";import{O as b}from"./GraphicsView2D-DPY4RrOT.js";import"./earcut-D9gy186-.js";import"./vec3f32-WCVSSNPR.js";import{r as P,o,n as _}from"./imageUtils-_KuvPT6U.js";import{S as Q,u as S}from"./LayerView-Dhjf0-qm.js";import{a as G}from"./HighlightGraphicContainer-D5puf_XY.js";import{i as L}from"./RefreshableLayerView-CL-ncZoP.js";import{_ as k,P as F,i as z}from"./MapServiceLayerViewHelper-DUWTwMha.js";import{r as E}from"./drapedUtils-NlMURLG9.js";import"./vec42-B8V8Ss_9.js";import"./vec4f64-DPb6J-GU.js";import"./BidiEngine-QXap_35O.js";import"./OptimizedFeature-UgFrRqcY.js";import"./memoryEstimations-DY00BK4o.js";import"./utils-vSs1juDA.js";import"./rasterizingUtils-D9iEM4s9.js";import"./Rect-CUzevAry.js";import"./defaultsJSON-GKolV7NZ.js";import"./FieldsIndex-DRgmiPRe.js";import"./ArcadeExpression-B4nQQTbb.js";import"./quantizationUtils-NZeoNVDs.js";import"./ProgramTemplate-I_4uhNUP.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./config-DHajyIwB.js";import"./featureConversionUtils-DXDLMTBw.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./GraphShaderModule-DS_7kDvA.js";import"./ShaderBuilder-D78yHDdB.js";import"./BindType-BBwFZqyN.js";import"./utils-CSMZGcLS.js";import"./CircularArray-CujHzHWW.js";import"./SymbolFader-DhLmNNhO.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-Cgsvir5y.js";import"./libtess-FjizizOU.js";import"./enum-B2GTxHxe.js";import"./basicInterfaces-N86vRvDz.js";import"./AttributeStore-DAh67KZE.js";import"./labelUtils-BuZC9Yns.js";import"./diffUtils-DufdeOAi.js";import"./queryUtils-BTakVHbq.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DBUrhqEx.js";import"./normalizeUtilsSync-DtGZ_HDl.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-C80wcmal.js";import"./BitmapTechnique-DC5BT-5U.js";import"./bitmapUtils-QNnY2suj.js";import"./TileContainer-Dd5YFy0t.js";import"./layerViewUtils-CLcZWAE6.js";import"./AGraphicContainer-CN8A2sIs.js";import"./TechniqueInstance-DDOLOXhL.js";import"./scaleUtils-DzXGpvik.js";import"./floorFilterUtils-n6UOt7ty.js";import"./sublayerUtils-BbnY2ndJ.js";import"./popupUtils-5kp4zSNV.js";const W=[0,0];let l=class extends L(P(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this._highlightView?.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,i=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,i?.effectiveMinLOD,i?.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,h)=>this.fetchTile(e,h),scheduler:this.scheduler,priority:T.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),k(this,this.layer)){const e=this._highlightView=new b({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new G(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new F({createFetchPopupFeaturesQueryGeometry:(h,r)=>E(h,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:({graphic:h,property:r})=>e.graphicUpdateHandler({graphic:h,property:r}),layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add((()=>this.resampling),(()=>{this.doRefresh()}))),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,i):[]}highlight(t,i){const e=z(t);if(e.length===0)return g();const h=i?.name??H;return this._addHighlightGraphics(e,h),g((()=>!this.destroyed&&this._removeHighlightGraphics(e,h)))}_processHighlight(){const t=this._getHighlights();this._highlightView?.setHighlight(t)}_addHighlightGraphics(t,i){this._highlightGraphics.addMany(t),this._addHighlights(t.map((e=>e.uid)),i)}_removeHighlightGraphics(t,i){this._highlightGraphics.removeMany(t),this._removeHighlights(t.map((e=>e.uid)),i)}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return v(this.layer.tileInfo?.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh((t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t))))}}acquireTile(t){const i=this._bitmapView.createTile(t),e=i.bitmap;return[e.x,e.y]=this._tileInfoView.getTileCoords(W,i.key),e.resolution=this._tileInfoView.getTileResolution(i.key),[e.width,e.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(i)),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",(()=>t.destroy())),this.requestUpdate()}async fetchTile(t,i={}){return this.tilemapCache?this._fetchTileWithTilemapCache(t,i):this._fetchTileWithoutTilemapCache(t,i)}async _fetchTileWithoutTilemapCache(t,i={}){const{signal:e,resamplingLevel:h=0}=i;try{return await this._fetchImage(t,e)}catch(r){if(n(r))throw r;if(!this.resampling)return o(this._tileInfoView.tileInfo.size);if(h<3){const s=this._tileInfoView.getTileParentId(t.id);if(s){const a=new f(s),p=await this._fetchTileWithoutTilemapCache(a,{...i,resamplingLevel:h+1});return _(this._tileInfoView,p,a,t)}}return o(this._tileInfoView.tileInfo.size)}}async _fetchTileWithTilemapCache(t,i={}){const e=this.tilemapCache,{signal:h,resamplingLevel:r=0}=i,s=new f(0,0,0,0);let a,p=null;try{if(p=await e.fetchAvailabilityUpsample(t.level,t.row,t.col,s,{signal:h}),!this.resampling&&s.level!==t.level)return await C(i),o(this._tileInfoView.tileInfo.size);a=await this._fetchImage(s,h)}catch(c){if(n(c))throw c;if(this.resampling&&p==="unknown"&&r<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){s.set(u);try{a=await this._fetchTileWithTilemapCache(s,{...i,resamplingLevel:r+1})}catch{}}}}return a?this.resampling?_(this._tileInfoView,a,s,t):a:o(this._tileInfoView.tileInfo.size)}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const i=await this._fetchQueue.push(t.key);t.bitmap.source=i,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",(()=>this.requestUpdate()))}catch(i){n(i)||q.getLogger(this).error(i)}this.requestUpdate()}}async _fetchImage(t,i){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:i})}};m([d()],l.prototype,"resampling",null),m([d()],l.prototype,"tilemapCache",null),l=m([U("esri.views.2d.layers.TileLayerView2D")],l);const ui=l;export{ui as default};
