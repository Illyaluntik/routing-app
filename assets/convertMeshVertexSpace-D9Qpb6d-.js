import{a9 as s,s as m,aG as p}from"./index-CIvzYPzY.js";import{p as a}from"./MeshVertexAttributes-DjfMEYbE.js";import{B as n}from"./vertexSpaceConversion-DcEKz_y9.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-DpAEn7GN.js";import"./computeTranslationToOriginAndRotation-CdmEA3G3.js";import"./projectPointToVector-Cq5chfML.js";import"./meshVertexSpaceUtils-D873sbTF.js";import"./MeshLocalVertexSpace-BGf-A1es.js";import"./vec3-De6G0TZR.js";import"./BufferView-EldB-0sL.js";import"./vec42-CYPJBKnA.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-C1FQcvJ9.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
