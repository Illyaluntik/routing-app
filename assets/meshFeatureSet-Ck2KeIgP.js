import{i as h,ar as l,cO as d,y as S,ac as g,F as N}from"./index-CIvzYPzY.js";import y from"./Mesh-DsM-OR0S.js";import{n as D,i as F}from"./External-KIBsrosH.js";import{s as M}from"./infoFor3D-VMSlSy0z.js";import{n as T,i as I}from"./meshFeatureAttributes-C6y8MqpI.js";import"./axisAngleDegrees-Dr2pDxf2.js";import"./quat-C4f1zs_C.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./vec42-CYPJBKnA.js";import"./MeshComponent-CkXRvrR2.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshLocalVertexSpace-BGf-A1es.js";import"./MeshTransform-CQdVqHEi.js";import"./mat4f64-q_b6UJoq.js";import"./MeshVertexAttributes-DjfMEYbE.js";import"./meshVertexSpaceUtils-D873sbTF.js";import"./triangulationUtils-z8dui4nh.js";import"./earcut-D9gy186-.js";import"./Indices-B6PBosyj.js";import"./plane-CmRcNvVQ.js";import"./vectorStacks-C5uqZl0G.js";import"./vec4f64-DPb6J-GU.js";import"./deduplicate-6-uicBt2.js";import"./projectPointToVector-Cq5chfML.js";import"./vertexSpaceConversion-DcEKz_y9.js";import"./spatialReferenceEllipsoidUtils-DpAEn7GN.js";import"./computeTranslationToOriginAndRotation-CdmEA3G3.js";import"./vec3-De6G0TZR.js";import"./BufferView-EldB-0sL.js";import"./vec4-C1FQcvJ9.js";const O=()=>h.getLogger("esri.rest.support.meshFeatureSet");function ut(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=S.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=$(o,e.assetMaps),i=t.sourceSpatialReference??g.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?w(a.includes("*")?null:new Set(a)):()=>({});for(const p of r){const u=L(p,m,i,o,n);s.features.push(new N({geometry:u,attributes:c(p)}))}return s}function w(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=d.fromJSON(t.geometry);a.spatialReference=e;const c=I(t.attributes,r.transformFieldRoles),p=e.isGeographic?"local":"georeferenced",u=b(i);return u?y.createWithExternalSource(m,u,{extent:a,transform:c,vertexSpace:p,unitConversionDisabled:!0}):y.createIncomplete(m,{extent:a,transform:c,vertexSpace:p})}var f;function $(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,p=r.seqNo,u=M(i,t.supportedFormats);if(!u){O().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=l(e,s,(()=>({files:new Map})));l(E.files,n,(()=>({name:n,type:i,mimeType:u,status:P(c),parts:[]}))).parts[p]={hash:m,url:a}}return e}function b(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==f.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new D(n.url,n.hash))}e.push(new F(r.name,r.mimeType,s))}return{type:"service",assets:e}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{$ as assetMapFromAssetMapsJSON,L as extractMesh,ut as meshFeatureSetFromJSON};
