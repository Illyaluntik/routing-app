import{ce as N,c1 as h,ls as B,F as w,n as e,u as i,b9 as k,A,gE as F,v,lt as V,by as n,cP as X,lu as b,lv as Y,lw as T,lx as L,ly as u,lz as M,lA as p,lB as W,bB as E,lC as U,ba as K,lD as Z,lE as Q,lF as x,lG as J}from"./index-DVueJeH0.js";var P,S;let d=(S=class extends N.ClonableMixin(h){constructor(t){super(t),this.directionLineType=null,this.directionPointId=null,this.distance=null,this.duration=null,this.fromLevel=null,this.geometry=null,this.objectId=null,this.popupTemplate=null,this.symbol=null,this.toLevel=null,this.type="direction-line"}static fromGraphic(t){return new P({directionLineType:B.fromJSON(t.attributes.DirectionLineType),directionPointId:t.attributes.DirectionPointID,distance:t.attributes.Meters,duration:t.attributes.Minutes,fromLevel:t.attributes.FromLevel??null,geometry:t.geometry,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,symbol:t.symbol,toLevel:t.attributes.ToLevel??null})}toGraphic(){const t={ObjectID:this.objectId,DirectionLineType:this.directionLineType?B.toJSON(this.directionLineType):null,DirectionPointID:this.directionPointId,Meters:this.distance,Minutes:this.duration};return this.fromLevel!=null&&(t.FromLevel=this.fromLevel),this.toLevel!=null&&(t.ToLevel=this.toLevel),new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},P=S,S.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"DirectionLineType",alias:"Line Type",type:"esriFieldTypeInteger"},{name:"DirectionPointID",alias:"Direction Point ID",type:"esriFieldTypeInteger"},{name:"FromLevel",alias:"From Level",type:"esriFieldTypeInteger"},{name:"Meters",alias:"Meters",type:"esriFieldTypeDouble"},{name:"Minutes",alias:"Minutes",type:"esriFieldTypeDouble"},{name:"ToLevel",alias:"To Level",type:"esriFieldTypeInteger"}],S);e([i({type:B.apiValues,json:{read:{source:"attributes.DirectionLineType",reader:B.read}}})],d.prototype,"directionLineType",void 0),e([i({json:{read:{source:"attributes.DirectionPointID"}}})],d.prototype,"directionPointId",void 0),e([i({json:{read:{source:"attributes.Meters"}}})],d.prototype,"distance",void 0),e([i({json:{read:{source:"attributes.Minutes"}}})],d.prototype,"duration",void 0),e([i({json:{read:{source:"attributes.FromLevel"}}})],d.prototype,"fromLevel",void 0),e([i({type:k})],d.prototype,"geometry",void 0),e([i({json:{read:{source:"attributes.ObjectID"}}})],d.prototype,"objectId",void 0),e([i({type:A})],d.prototype,"popupTemplate",void 0),e([i({types:F})],d.prototype,"symbol",void 0),e([i({json:{read:{source:"attributes.ToLevel"}}})],d.prototype,"toLevel",void 0),e([i({readOnly:!0,json:{read:!1}})],d.prototype,"type",void 0),d=P=e([v("esri.rest.support.DirectionLine")],d);var _,D;let o=(D=class extends N.ClonableMixin(h){constructor(t){super(t),this.alternateName=null,this.arrivalTime=null,this.arrivalTimeOffset=null,this.azimuth=null,this.branchName=null,this.directionPointType=null,this.displayText=null,this.exitName=null,this.geometry=null,this.intersectingName=null,this.level=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sequence=null,this.shortVoiceInstruction=null,this.stopId=null,this.symbol=null,this.towardName=null,this.type="direction-point",this.voiceInstruction=null}readArrivalTime(t,r){return r.attributes.ArrivalTime!=null?new Date(r.attributes.ArrivalTime):null}static fromGraphic(t){return new _({alternateName:t.attributes.AlternateName??null,arrivalTime:t.attributes.ArrivalTime!=null?new Date(t.attributes.ArrivalTime):null,arrivalTimeOffset:t.attributes.ArrivalUTCOffset??null,azimuth:t.attributes.Azimuth??null,branchName:t.attributes.BranchName??null,directionPointType:V.fromJSON(t.attributes.DirectionPointType),displayText:t.attributes.DisplayText??null,exitName:t.attributes.ExitName??null,geometry:t.geometry,intersectingName:t.attributes.IntersectingName??null,level:t.attributes.Level??null,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,sequence:t.attributes.Sequence,shortVoiceInstruction:t.attributes.ShortVoiceInstruction??null,stopId:t.attributes.StopID??null,symbol:t.symbol,towardName:t.attributes.TowardName??null,voiceInstruction:t.attributes.VoiceInstruction??null})}toGraphic(){const t={ObjectID:this.objectId,DirectionPointType:this.directionPointType?V.toJSON(this.directionPointType):null,Sequence:this.sequence,StopID:this.stopId};return this.alternateName!=null&&(t.AlternateName=this.alternateName),this.arrivalTime!=null&&(t.ArrivalTime=this.arrivalTime.getTime()),this.arrivalTimeOffset!=null&&(t.ArrivalUTCOffset=this.arrivalTimeOffset),this.azimuth!=null&&(t.Azimuth=this.azimuth),this.branchName!=null&&(t.BranchName=this.branchName),this.displayText!=null&&(t.DisplayText=this.displayText),this.exitName!=null&&(t.ExitName=this.exitName),this.intersectingName!=null&&(t.IntersectingName=this.intersectingName),this.level!=null&&(t.Level=this.level),this.name!=null&&(t.Name=this.name),this.shortVoiceInstruction!=null&&(t.ShortVoiceInstruction=this.shortVoiceInstruction),this.towardName!=null&&(t.TowardName=this.towardName),this.voiceInstruction!=null&&(t.VoiceInstruction=this.voiceInstruction),new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},_=D,D.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AlternateName",alias:"Alternative Name",type:"esriFieldTypeString"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time Offset",type:"esriFieldTypeInteger"},{name:"Azimuth",alias:"Azimuth",type:"esriFieldTypeDouble"},{name:"BranchName",alias:"Branch Name",type:"esriFieldTypeString"},{name:"DirectionPointType",alias:"Directions Point Type",type:"esriFieldTypeInteger"},{name:"DisplayText",alias:"Display Text",type:"esriFieldTypeString"},{name:"ExitName",alias:"Exit Name",type:"esriFieldTypeString"},{name:"IntersectingName",alias:"Intersecting Name",type:"esriFieldTypeString"},{name:"Level",alias:"Level",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ShortVoiceInstruction",alias:"Short Voice Instruction",type:"esriFieldTypeString"},{name:"StopID",alias:"Stop ID",type:"esriFieldTypeInteger"},{name:"TowardName",alias:"Toward Name",type:"esriFieldTypeString"},{name:"VoiceInstruction",alias:"Voice Instruction",type:"esriFieldTypeString"}],D);e([i({json:{read:{source:"attributes.AlternateName"}}})],o.prototype,"alternateName",void 0),e([i({type:Date})],o.prototype,"arrivalTime",void 0),e([n("arrivalTime",["attributes.ArrivalTime"])],o.prototype,"readArrivalTime",null),e([i({json:{read:{source:"attributes.ArrivalUTCOffset"}}})],o.prototype,"arrivalTimeOffset",void 0),e([i({json:{read:{source:"attributes.Azimuth"}}})],o.prototype,"azimuth",void 0),e([i({json:{read:{source:"attributes.BranchName"}}})],o.prototype,"branchName",void 0),e([i({type:V.apiValues,json:{read:{source:"attributes.DirectionPointType",reader:V.read}}})],o.prototype,"directionPointType",void 0),e([i({json:{read:{source:"attributes.DisplayText"}}})],o.prototype,"displayText",void 0),e([i({json:{read:{source:"attributes.ExitName"}}})],o.prototype,"exitName",void 0),e([i({type:X})],o.prototype,"geometry",void 0),e([i({json:{read:{source:"attributes.IntersectingName"}}})],o.prototype,"intersectingName",void 0),e([i({json:{read:{source:"attributes.Level"}}})],o.prototype,"level",void 0),e([i({json:{read:{source:"attributes.Name"}}})],o.prototype,"name",void 0),e([i({json:{read:{source:"attributes.ObjectID"}}})],o.prototype,"objectId",void 0),e([i({type:A})],o.prototype,"popupTemplate",void 0),e([i({json:{read:{source:"attributes.Sequence"}}})],o.prototype,"sequence",void 0),e([i({json:{read:{source:"attributes.ShortVoiceInstruction"}}})],o.prototype,"shortVoiceInstruction",void 0),e([i({json:{read:{source:"attributes.StopID"}}})],o.prototype,"stopId",void 0),e([i({types:F})],o.prototype,"symbol",void 0),e([i({json:{read:{source:"attributes.TowardName"}}})],o.prototype,"towardName",void 0),e([i({readOnly:!0,json:{read:!1}})],o.prototype,"type",void 0),e([i({json:{read:{source:"attributes.VoiceInstruction"}}})],o.prototype,"voiceInstruction",void 0),o=_=e([v("esri.rest.support.DirectionPoint")],o);var q,C;let l=(C=class extends N.ClonableMixin(h){constructor(t){super(t),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(t,r){return b(r.attributes,"Attr_")}writeCosts(t,r){Y(t,r,"Attr_")}static fromGraphic(t){return new q({addedCost:t.attributes.AddedCost??null,barrierType:t.attributes.BarrierType!=null?p.fromJSON(t.attributes.BarrierType):null,costs:t.attributes.Costs!=null?M(JSON.parse(t.attributes.Costs)):null,curbApproach:t.attributes.CurbApproach!=null?u.fromJSON(t.attributes.CurbApproach):null,fullEdge:t.attributes.FullEdge!=null?L.fromJSON(t.attributes.FullEdge):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,status:t.attributes.Status!=null?T.fromJSON(t.attributes.Status):null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:this.barrierType?p.toJSON(this.barrierType):null,Costs:this.costs?JSON.stringify(W(this.costs)):null,CurbApproach:this.curbApproach?u.toJSON(this.curbApproach):null,FullEdge:this.fullEdge?L.toJSON(this.fullEdge):null,Name:this.name,Status:this.status?T.toJSON(this.status):null};return new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},q=C,C.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],C);e([i()],l.prototype,"addedCost",void 0),e([i({type:p.apiValues,json:{name:"attributes.BarrierType",read:{reader:p.read},write:{writer:p.write}}})],l.prototype,"barrierType",void 0),e([i()],l.prototype,"costs",void 0),e([n("costs",["attributes"])],l.prototype,"readCosts",null),e([E("costs")],l.prototype,"writeCosts",null),e([i({type:u.apiValues,json:{read:{source:"attributes.CurbApproach",reader:u.read}}})],l.prototype,"curbApproach",void 0),e([i({type:L.apiValues,json:{name:"attributes.FullEdge",read:{reader:L.read},write:{writer:L.write}}})],l.prototype,"fullEdge",void 0),e([i({type:X,json:{write:!0}})],l.prototype,"geometry",void 0),e([i({json:{name:"attributes.Name"}})],l.prototype,"name",void 0),e([i({json:{name:"attributes.ObjectID"}})],l.prototype,"objectId",void 0),e([i({type:A})],l.prototype,"popupTemplate",void 0),e([i({type:U.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:U.read}}})],l.prototype,"sideOfEdge",void 0),e([i({json:{read:{source:"attributes.SourceID"}}})],l.prototype,"sourceId",void 0),e([i({json:{read:{source:"attributes.SourceOID"}}})],l.prototype,"sourceOid",void 0),e([i({type:T.apiValues,json:{read:{source:"attributes.Status",reader:T.read}}})],l.prototype,"status",void 0),e([i({types:F})],l.prototype,"symbol",void 0),e([i({readOnly:!0,json:{read:!1}})],l.prototype,"type",void 0),l=q=e([v("esri.rest.support.PointBarrier")],l);var G,O;let m=(O=class extends N.ClonableMixin(h){constructor(t){super(t),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polygon-barrier"}readCosts(t,r){return b(r.attributes,"Attr_")}writeCosts(t,r){Y(t,r,"Attr_")}static fromGraphic(t){return new G({barrierType:t.attributes.BarrierType!=null?p.fromJSON(t.attributes.BarrierType):null,costs:t.attributes.Costs!=null?M(JSON.parse(t.attributes.Costs)):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,scaleFactor:t.attributes.ScaleFactor??null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,BarrierType:this.barrierType?p.toJSON(this.barrierType):null,Costs:this.costs?JSON.stringify(W(this.costs)):null,Name:this.name??null,ScaleFactor:this.scaleFactor??null};return new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},G=O,O.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],O);e([i({type:p.apiValues,json:{name:"attributes.BarrierType",read:{reader:p.read},write:{writer:p.write}}})],m.prototype,"barrierType",void 0),e([i()],m.prototype,"costs",void 0),e([n("costs",["attributes"])],m.prototype,"readCosts",null),e([E("costs")],m.prototype,"writeCosts",null),e([i({type:K,json:{write:!0}})],m.prototype,"geometry",void 0),e([i({json:{name:"attributes.Name"}})],m.prototype,"name",void 0),e([i({json:{name:"attributes.ObjectID"}})],m.prototype,"objectId",void 0),e([i({type:A})],m.prototype,"popupTemplate",void 0),e([i()],m.prototype,"scaleFactor",void 0),e([i({types:F})],m.prototype,"symbol",void 0),e([i({readOnly:!0,json:{read:!1}})],m.prototype,"type",void 0),m=G=e([v("esri.rest.support.PolygonBarrier")],m);var $,g;let c=(g=class extends N.ClonableMixin(h){constructor(t){super(t),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polyline-barrier"}readCosts(t,r){return b(r.attributes,"Attr_")}static fromGraphic(t){return new $({barrierType:t.attributes.BarrierType!=null?p.fromJSON(t.attributes.BarrierType):null,costs:t.attributes.Costs!=null?M(JSON.parse(t.attributes.Costs)):null,geometry:t.geometry,name:t.attributes.Name??null,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,scaleFactor:t.attributes.ScaleFactor??null,symbol:t.symbol})}toGraphic(){const t={ObjectID:this.objectId,BarrierType:this.barrierType?p.toJSON(this.barrierType):null,Costs:this.costs?JSON.stringify(W(this.costs)):null,Name:this.name,ScaleFactor:this.scaleFactor};return new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},$=g,g.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],g);e([i({type:p.apiValues,json:{read:{source:"attributes.BarrierType",reader:p.read}}})],c.prototype,"barrierType",void 0),e([i()],c.prototype,"costs",void 0),e([n("costs",["attributes"])],c.prototype,"readCosts",null),e([i({type:k,json:{write:!0}})],c.prototype,"geometry",void 0),e([i({json:{name:"attributes.Name"}})],c.prototype,"name",void 0),e([i({json:{name:"attributes.ObjectID"}})],c.prototype,"objectId",void 0),e([i({type:A})],c.prototype,"popupTemplate",void 0),e([i()],c.prototype,"scaleFactor",void 0),e([i({types:F})],c.prototype,"symbol",void 0),e([i({readOnly:!0,json:{read:!1}})],c.prototype,"type",void 0),c=$=e([v("esri.rest.support.PolylineBarrier")],c);let y=class extends h{constructor(f){super(f),this.accumulateAttributes=null,this.directionsLanguage=null,this.findBestSequence=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.startTimeIsUTC=null,this.timeWindowsAreUTC=null,this.travelMode=null}readAccumulateAttributes(f){return f==null?null:f.map((t=>Z.fromJSON(t)))}writeAccumulateAttributes(f,t,r){f?.length&&(t[r]=f.map((H=>Z.toJSON(H))))}};e([i({type:[String],json:{name:"accumulateAttributeNames",write:!0}})],y.prototype,"accumulateAttributes",void 0),e([n("accumulateAttributes")],y.prototype,"readAccumulateAttributes",null),e([E("accumulateAttributes")],y.prototype,"writeAccumulateAttributes",null),e([i({type:String,json:{write:!0}})],y.prototype,"directionsLanguage",void 0),e([i({type:Boolean,json:{write:!0}})],y.prototype,"findBestSequence",void 0),e([i({type:Boolean,json:{write:!0}})],y.prototype,"preserveFirstStop",void 0),e([i({type:Boolean,json:{write:!0}})],y.prototype,"preserveLastStop",void 0),e([i({type:Boolean,json:{write:!0}})],y.prototype,"startTimeIsUTC",void 0),e([i({type:Boolean,json:{write:!0}})],y.prototype,"timeWindowsAreUTC",void 0),e([i({type:Q,json:{write:!0}})],y.prototype,"travelMode",void 0),y=e([v("esri.rest.support.RouteSettings")],y);var z,I;let a=(I=class extends N.ClonableMixin(h){constructor(t){super(t),this.analysisSettings=null,this.endTime=null,this.endTimeOffset=null,this.firstStopId=null,this.geometry=null,this.lastStopId=null,this.messages=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.startTime=null,this.startTimeOffset=null,this.stopCount=null,this.symbol=null,this.totalCosts=null,this.totalDistance=null,this.totalDuration=null,this.totalLateDuration=null,this.totalViolations=null,this.totalWait=null,this.totalWaitDuration=null,this.type="route-info",this.version="1.0.0"}readEndTime(t,r){return r.attributes.EndTimeUTC!=null?new Date(r.attributes.EndTimeUTC):null}readEndTimeOffset(t,r){return x(r.attributes.EndTime,r.attributes.EndTimeUTC)}readStartTime(t,r){return r.attributes.StartTimeUTC!=null?new Date(r.attributes.StartTimeUTC):null}readStartTimeOffset(t,r){return x(r.attributes.StartTime,r.attributes.StartTimeUTC)}readTotalCosts(t,r){return b(r.attributes,"Total_")}readTotalViolations(t,r){return b(r.attributes,"TotalViolation_")}readTotalWait(t,r){return b(r.attributes,"TotalWait_")}static fromGraphic(t){return new z({analysisSettings:t.attributes.AnalysisSettings!=null?y.fromJSON(JSON.parse(t.attributes.AnalysisSettings)):null,endTime:t.attributes.EndTime!=null?new Date(t.attributes.EndTime):null,endTimeOffset:t.attributes.EndUTCOffset??null,geometry:t.geometry,messages:t.attributes.Messages!=null?JSON.parse(t.attributes.Messages):null,name:t.attributes.RouteName,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,startTime:t.attributes.StartTime!=null?new Date(t.attributes.StartTime):null,startTimeOffset:t.attributes.StartUTCOffset??null,symbol:t.symbol,totalCosts:t.attributes.TotalCosts!=null?M(JSON.parse(t.attributes.TotalCosts)):null,totalDistance:t.attributes.TotalMeters??null,totalDuration:t.attributes.TotalMinutes??null,totalLateDuration:t.attributes.TotalLateMinutes??null,totalWaitDuration:t.attributes.TotalWaitMinutes??null,version:t.attributes.Version})}toGraphic(){const t={ObjectID:this.objectId,AnalysisSettings:this.analysisSettings?JSON.stringify(this.analysisSettings.toJSON()):null,EndTime:this.endTime?.getTime()??null,EndUTCOffset:this.endTimeOffset,Messages:this.messages?JSON.stringify(this.messages):null,RouteName:this.name,StartTime:this.startTime?.getTime()??null,StartUTCOffset:this.startTimeOffset,TotalCosts:this.totalCosts?JSON.stringify(W(this.totalCosts)):null,TotalLateMinutes:this.totalLateDuration,TotalMeters:this.totalDistance,TotalMinutes:this.totalDuration,TotalWaitMinutes:this.totalWaitDuration,Version:this.version};return new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},z=I,I.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AnalysisSettings",alias:"Analysis Settings",type:"esriFieldTypeString"},{name:"EndTime",alias:"End Time",type:"esriFieldTypeDate"},{name:"EndUTCOffset",alias:"End Time Offset",type:"esriFieldTypeInteger"},{name:"Messages",alias:"Messages",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"StartTime",alias:"Start Time",type:"esriFieldTypeDate"},{name:"StartUTCOffset",alias:"Start Time Offset",type:"esriFieldTypeInteger"},{name:"TotalCosts",alias:"Total Costs",type:"esriFieldTypeString"},{name:"TotalLateMinutes",alias:"Total Late Minutes",type:"esriFieldTypeDouble"},{name:"TotalMeters",alias:"Total Meters",type:"esriFieldTypeDouble"},{name:"TotalMinutes",alias:"Total Minutes",type:"esriFieldTypeDouble"},{name:"TotalWaitMinutes",alias:"Total Wait Minutes",type:"esriFieldTypeDouble"},{name:"Version",alias:"Version",type:"esriFieldTypeString"}],I);e([i()],a.prototype,"analysisSettings",void 0),e([i({type:Date})],a.prototype,"endTime",void 0),e([n("endTime",["attributes.EndTimeUTC"])],a.prototype,"readEndTime",null),e([i()],a.prototype,"endTimeOffset",void 0),e([n("endTimeOffset",["attributes.EndTime","attributes.EndTimeUTC"])],a.prototype,"readEndTimeOffset",null),e([i({json:{read:{source:"attributes.FirstStopID"}}})],a.prototype,"firstStopId",void 0),e([i({type:k})],a.prototype,"geometry",void 0),e([i({json:{read:{source:"attributes.LastStopID"}}})],a.prototype,"lastStopId",void 0),e([i()],a.prototype,"messages",void 0),e([i({json:{read:{source:"attributes.Name"}}})],a.prototype,"name",void 0),e([i({json:{read:{source:"attributes.ObjectID"}}})],a.prototype,"objectId",void 0),e([i({type:A})],a.prototype,"popupTemplate",void 0),e([i({type:Date})],a.prototype,"startTime",void 0),e([n("startTime",["attributes.StartTimeUTC"])],a.prototype,"readStartTime",null),e([i()],a.prototype,"startTimeOffset",void 0),e([n("startTimeOffset",["attributes.StartTime","attributes.StartTimeUTC"])],a.prototype,"readStartTimeOffset",null),e([i({json:{read:{source:"attributes.StopCount"}}})],a.prototype,"stopCount",void 0),e([i({types:F})],a.prototype,"symbol",void 0),e([i()],a.prototype,"totalCosts",void 0),e([n("totalCosts",["attributes"])],a.prototype,"readTotalCosts",null),e([i()],a.prototype,"totalDistance",void 0),e([i()],a.prototype,"totalDuration",void 0),e([i()],a.prototype,"totalLateDuration",void 0),e([i()],a.prototype,"totalViolations",void 0),e([n("totalViolations",["attributes"])],a.prototype,"readTotalViolations",null),e([i()],a.prototype,"totalWait",void 0),e([n("totalWait",["attributes"])],a.prototype,"readTotalWait",null),e([i()],a.prototype,"totalWaitDuration",void 0),e([i({readOnly:!0,json:{read:!1}})],a.prototype,"type",void 0),e([i()],a.prototype,"version",void 0),a=z=e([v("esri.rest.support.RouteInfo")],a);var R,j;let s=(j=class extends N.ClonableMixin(h){constructor(t){super(t),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(t,r){return x(r.attributes.ArriveTime,r.attributes.ArriveTimeUTC)}readCumulativeCosts(t,r){return b(r.attributes,"Cumul_")}readDepartTimeOffset(t,r){return x(r.attributes.DepartTime,r.attributes.DepartTimeUTC)}readServiceCosts(t,r){return b(r.attributes,"Attr_")}writeServiceCosts(t,r){Y(t,r,"Attr_")}writeTimeWindowEnd(t,r){t!=null&&(r.attributes||(r.attributes={}),r.attributes.TimeWindowEnd=t.getTime())}writeTimeWindowStart(t,r){t!=null&&(r.attributes||(r.attributes={}),r.attributes.TimeWindowStart=t.getTime())}readViolations(t,r){return b(r.attributes,"Violation_")}readWait(t,r){return b(r.attributes,"Wait_")}static fromGraphic(t){return new R({arriveCurbApproach:t.attributes.ArrivalCurbApproach!=null?u.fromJSON(t.attributes.ArrivalCurbApproach):null,arriveTime:t.attributes.ArrivalTime!=null?new Date(t.attributes.ArrivalTime):null,arriveTimeOffset:t.attributes.ArrivalUTCOffset,cumulativeCosts:t.attributes.CumulativeCosts!=null?M(JSON.parse(t.attributes.CumulativeCosts)):null,cumulativeDistance:t.attributes.CumulativeMeters??null,cumulativeDuration:t.attributes.CumulativeMinutes??null,curbApproach:t.attributes.CurbApproach!=null?u.fromJSON(t.attributes.CurbApproach):null,departCurbApproach:t.attributes.DepartureCurbApproach!=null?u.fromJSON(t.attributes.DepartureCurbApproach):null,departTime:t.attributes.DepartureTime!=null?new Date(t.attributes.DepartureTime):null,departTimeOffset:t.attributes.DepartureUTCOffset??null,geometry:t.geometry,lateDuration:t.attributes.LateMinutes??null,locationType:t.attributes.LocationType!=null?J.fromJSON(t.attributes.LocationType):null,name:t.attributes.Name,objectId:t.attributes.ObjectID??t.attributes.__OBJECTID,popupTemplate:t.popupTemplate,routeName:t.attributes.RouteName,sequence:t.attributes.Sequence??null,serviceCosts:t.attributes.ServiceCosts!=null?M(JSON.parse(t.attributes.ServiceCosts)):null,serviceDistance:t.attributes.ServiceMeters??null,serviceDuration:t.attributes.ServiceMinutes??null,status:t.attributes.Status!=null?T.fromJSON(t.attributes.Status):null,symbol:t.symbol,timeWindowEnd:t.attributes.TimeWindowEnd!=null?new Date(t.attributes.TimeWindowEnd):null,timeWindowEndOffset:t.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:t.attributes.TimeWindowStart!=null?new Date(t.attributes.TimeWindowStart):null,timeWindowStartOffset:t.attributes.TimeWindowStartUTCOffset??null,waitDuration:t.attributes.WaitMinutes??null})}toGraphic(){const t={ObjectID:this.objectId,ArrivalCurbApproach:this.arriveCurbApproach?u.toJSON(this.arriveCurbApproach):null,ArrivalTime:this.arriveTime?.getTime()??null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:this.cumulativeCosts?JSON.stringify(W(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:this.curbApproach?u.toJSON(this.curbApproach):null,DepartureCurbApproach:this.departCurbApproach?u.toJSON(this.departCurbApproach):null,DepartureTime:this.departTime?.getTime()??null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:this.locationType?J.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:this.serviceCosts?JSON.stringify(W(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:this.status?T.toJSON(this.status):null,TimeWindowEnd:this.timeWindowEnd?.getTime()??null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:this.timeWindowStart?.getTime()??null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new w({geometry:this.geometry,attributes:t,symbol:this.symbol,popupTemplate:this.popupTemplate})}},R=j,j.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}],j);e([i({type:u.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:u.read}}})],s.prototype,"arriveCurbApproach",void 0),e([i({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],s.prototype,"arriveTime",void 0),e([i()],s.prototype,"arriveTimeOffset",void 0),e([n("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],s.prototype,"readArriveTimeOffset",null),e([i({json:{name:"attributes.Bearing",read:!1,write:!0}})],s.prototype,"bearing",void 0),e([i({json:{name:"attributes.BearingTol",read:!1,write:!0}})],s.prototype,"bearingTol",void 0),e([i()],s.prototype,"cumulativeCosts",void 0),e([n("cumulativeCosts",["attributes"])],s.prototype,"readCumulativeCosts",null),e([i()],s.prototype,"cumulativeDistance",void 0),e([i()],s.prototype,"cumulativeDuration",void 0),e([i({type:u.apiValues,json:{name:"attributes.CurbApproach",read:{reader:u.read},write:{writer:u.write}}})],s.prototype,"curbApproach",void 0),e([i({type:u.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:u.read}}})],s.prototype,"departCurbApproach",void 0),e([i({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],s.prototype,"departTime",void 0),e([i()],s.prototype,"departTimeOffset",void 0),e([n("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],s.prototype,"readDepartTimeOffset",null),e([i({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],s.prototype,"distanceToNetworkInMeters",void 0),e([i({type:X,json:{write:!0}})],s.prototype,"geometry",void 0),e([i()],s.prototype,"lateDuration",void 0),e([i({type:J.apiValues,json:{name:"attributes.LocationType",read:{reader:J.read},write:{writer:J.write}}})],s.prototype,"locationType",void 0),e([i({json:{name:"attributes.Name"}})],s.prototype,"name",void 0),e([i({json:{name:"attributes.NavLatency",read:!1,write:!0}})],s.prototype,"navLatency",void 0),e([i({json:{name:"attributes.ObjectID"}})],s.prototype,"objectId",void 0),e([i({type:A})],s.prototype,"popupTemplate",void 0),e([i({json:{read:{source:"attributes.PosAlong"}}})],s.prototype,"posAlong",void 0),e([i({json:{name:"attributes.RouteName"}})],s.prototype,"routeName",void 0),e([i()],s.prototype,"serviceCosts",void 0),e([n("serviceCosts",["attributes"])],s.prototype,"readServiceCosts",null),e([E("serviceCosts")],s.prototype,"writeServiceCosts",null),e([i()],s.prototype,"serviceDistance",void 0),e([i()],s.prototype,"serviceDuration",void 0),e([i({json:{name:"attributes.Sequence"}})],s.prototype,"sequence",void 0),e([i({type:U.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:U.read}}})],s.prototype,"sideOfEdge",void 0),e([i({json:{read:{source:"attributes.SnapX"}}})],s.prototype,"snapX",void 0),e([i({json:{read:{source:"attributes.SnapY"}}})],s.prototype,"snapY",void 0),e([i({json:{read:{source:"attributes.SnapZ"}}})],s.prototype,"snapZ",void 0),e([i({json:{read:{source:"attributes.SourceID"}}})],s.prototype,"sourceId",void 0),e([i({json:{read:{source:"attributes.SourceOID"}}})],s.prototype,"sourceOid",void 0),e([i({type:T.apiValues,json:{read:{source:"attributes.Status",reader:T.read}}})],s.prototype,"status",void 0),e([i({types:F})],s.prototype,"symbol",void 0),e([i({type:Date,json:{name:"attributes.TimeWindowEnd"}})],s.prototype,"timeWindowEnd",void 0),e([E("timeWindowEnd")],s.prototype,"writeTimeWindowEnd",null),e([i()],s.prototype,"timeWindowEndOffset",void 0),e([i({type:Date,json:{name:"attributes.TimeWindowStart"}})],s.prototype,"timeWindowStart",void 0),e([E("timeWindowStart")],s.prototype,"writeTimeWindowStart",null),e([i()],s.prototype,"timeWindowStartOffset",void 0),e([i({readOnly:!0,json:{read:!1}})],s.prototype,"type",void 0),e([i()],s.prototype,"violations",void 0),e([n("violations",["attributes"])],s.prototype,"readViolations",null),e([i()],s.prototype,"waitDuration",void 0),e([i()],s.prototype,"wait",void 0),e([n("wait",["attributes"])],s.prototype,"readWait",null),s=R=e([v("esri.rest.support.Stop")],s);export{l as S,o as a,s as b,d as c,c as d,y as e,a as f,m as h};
