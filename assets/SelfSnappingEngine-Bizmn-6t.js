import{aC as Z,kH as D,dA as R,kI as B,kJ as H,hD as G,fO as N,fN as b,kK as Q,kL as W,kM as X,h1 as Y,e0 as ee,ei as te,kN as se,aU as ie,V as re,n as L,u as T,v as ne}from"./index-Dew1EvIF.js";import{f as A,o as z}from"./quantityUtils-DYzhS_JJ.js";import{j as u}from"./elevationInfoUtils-PgOSfd3d.js";import{p as y,N as f,n as _,s as c,o as k,b as F,m as J,q as M,M as K,J as oe,r as ae,I as q,e as I,j as he,t as de,i as le,E as ce}from"./hitTestSelectUtils-C0jqLFnu.js";import{s as x,r as pe,g as ge,p as $,d as fe,o as ue,f as xe}from"./RouteLayerInteraction-Cv6WEwi3.js";import"./projectVectorToVector-CgbnPWuU.js";import"./projectPointToVector-DzZKg3oy.js";import"./geodesicUtils-Xm7MX9Tw.js";import"./vec42-P6fSsgl_.js";import"./vec4f64-DPb6J-GU.js";import"./plane-BCQstfit.js";import"./vectorStacks-BOxmengq.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BfBTugTB.js";import"./spatialReferenceEllipsoidUtils-DoX01c8c.js";import"./Stop-BQWwku_l.js";import"./geodeticLengthOperator-DnUbQ8Ur.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-B5KjI8aS.js";import"./lineSegment-DqahGPNz.js";class C{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(x(e,t,u,this.view),x(s,t,u,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=Z(t);return D(c(s),c(e))*i<y.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class me extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:n}=e,a=x(s,n,u,this.view),{view:o}=this,h=t.edges[i-1];let d=h;do{if(this.edgeExceedsShortLineThreshold(d,e)){const p=k(d,o,e);this._processCandidateProposal(p.left,p.right,s,a,e,r)}d=d.leftVertex.leftEdge}while(d&&d!==h);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:n}=this,{spatialReference:a}=e,o=x(s,a,u,n),h=i.leftEdge,d=i.rightEdge;h&&d&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(d,e)&&this._processCandidateProposal(f(h.leftVertex.pos,n,e),f(d.rightVertex.pos,n,e),s,o,e,t);const p=r.edges[0];let g=p;do{if(g!==i.leftEdge&&g!==i.rightEdge&&this.edgeExceedsShortLineThreshold(g,e)){const m=k(g,n,e);this._processCandidateProposal(m.left,m.right,s,o,e,t)}g=g.rightVertex.rightEdge}while(g&&g!==p);return t}_processCandidateProposal(s,e,t,i,r,n){const{spatialReference:a,pointer:o}=r,h=R();ve(h,s,e,t,r,this._geodesicLengthMeasurementUtils);const d=F(J(h));_(i,x(d,a,u,this.view))<this.squaredProximityThreshold(o)&&n.push(new pe({lineStart:s,lineEnd:e,targetPoint:d,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function ve(l,s,e,t,i,r){Ee(l,s,e,t,i,r)||we(l,t,s,e)}function Ee(l,s,e,t,{spatialReference:i},r){const n=M(s,e,i,i);if(n==null)return!1;const a=M(e,t,i,i);if(a==null)return!1;const o=r.geodesicDistance(e,t,i);if(o==null)return!1;const h=Math.abs(B.shortestSignedDiff(n,a))>Math.PI/2?H.normalize(n+Math.PI):n;return K(l,e,i,A(o,"meters"),z(h,"radians","geographic"),"geodesic"),l[2]=t[2],!0}function we(l,s,e,t){oe(s,{start:e,end:t,type:ae.LINE},l),l[2]=s[2]}let Ve=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,n=[];if(i<2)return n;const{view:a}=this,o=x(s,e.spatialReference,u,a),h=f(t.vertices[r-1].pos,a,e),d=f(t.vertices[0].pos,a,e),p=t.edges[i-1];let g=p;do{if(this.edgeExceedsShortLineThreshold(g,e)){const m=k(g,a,e);this._checkEdgeForParallelLines(m,h,s,o,e,n),this._checkEdgeForParallelLines(m,d,s,o,e,n)}g=g.leftVertex.leftEdge}while(g&&g!==p);return n}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:n}=this,a=x(s,e.spatialReference,u,n),o=i.leftEdge,h=i.rightEdge,d=r.vertices[0],p=f(d.pos,n,e),g=r.vertices.length,m=r.vertices[g-1],V=f(m.pos,n,e),P=r.edges[0];let v=P;do{if(v!==o&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const S=k(v,n,e);o&&this._checkEdgeForParallelLines(S,f(o.leftVertex.pos,n,e),s,a,e,t),h&&this._checkEdgeForParallelLines(S,f(h.rightVertex.pos,n,e),s,a,e,t),i===d?this._checkEdgeForParallelLines(S,V,s,a,e,t):i===m&&this._checkEdgeForParallelLines(S,p,s,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,n){const a=s.left,o=s.right;if(q(E,c(e),c(a),c(o)),G(E,c(e))<y.parallelLineThreshold)return;q(E,c(t),c(a),c(o),c(e));const{spatialReference:h,pointer:d}=r,p=F(I(E[0],E[1],t[2]));if(_(i,x(p,h,u,this.view))<this.squaredProximityThreshold(d)){if(this.isVertical(p,e,r)||this.isVertical(a,o,r)||Le(s,n))return;n.push(new ge({referenceLine:s,lineStart:e,targetPoint:p,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function Le(l,s){const e=l.left,t=l.right;for(const i of s)if(q(E,c(t),c(i.constraint.start),c(i.constraint.end),c(e)),G(E,c(t))<y.parallelLineThreshold)return i.addReferenceLine(l),!0;return!1}const E=N();class ye extends C{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,n=x(s,e.spatialReference,u,r),a=t.vertices.at(-1);this._checkForSnappingCandidate($.LastVertex,i,a.leftEdge,a,a.leftEdge.leftVertex,s,n,e);const o=t.vertices[0];return this._checkForSnappingCandidate($.FirstVertex,i,o.rightEdge,o,o.rightEdge.rightVertex,s,n,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,n=x(s,e.spatialReference,u,r),a=i.leftEdge,o=i.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.rightVertex,h.leftVertex,s,n,e)}if(o?.rightVertex.rightEdge){const h=o.rightVertex.rightEdge;this._checkForSnappingCandidate($.ExistingEdge,t,h,h.leftVertex,h.rightVertex,s,n,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,n,a,o){if(!this.edgeExceedsShortLineThreshold(t,o))return;const h=this.view,d=f(i.pos,h,o),p=f(r.pos,h,o);_e(O,p,d,n,o,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,p,d,O,n,a,o)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,n,a,o){const{spatialReference:h,pointer:d}=o,p=b(j,c(n),c(i)),g=Q(r,p)/W(r),m=X(j,c(i),r,g),V=F(I(m[0],m[1],n[2]));if(_(a,x(V,h,u,this.view))>this.squaredProximityThreshold(d)||this.isVertical(V,i,o)||this.isVertical(i,t,o))return;const P=Y(R(),i,r,Math.sign(g));e.push(new fe({targetPoint:V,constraint:new he(i,J(P)),previousVertex:t,otherVertex:i,otherVertexType:ue.CENTER,selfSnappingType:s,isDraped:o.elevationInfo?.mode==="on-the-ground"}))}}function _e(l,s,e,t,i,r){Pe(l,s,e,t,i,r)||Se(l,s,e)}function Pe(l,s,e,t,{spatialReference:i},r){const n=M(s,e,i,i);if(n==null)return!1;const a=M(e,t,i,i);if(a==null)return!1;const o=Math.sign(H.shortestSignedDiff(n,a))*Math.PI*.5,h=z(n+o,"radians","geographic"),d=R(),p=r.geodesicDistance(e,t,i);return p!=null&&(K(d,e,i,A(p,"meters"),h,"geodesic"),ee(l,d,e),!0)}function Se(l,s,e){const t=b(j,c(e),c(s));te(l,t[1],-t[0],0)}const j=N(),O=R();let Te=class extends C{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:n}=this,a=t.vertices[0],o=t.vertices[r-1],h=f(a.pos,n,e),d=f(o.pos,n,e);return this._processCandidateProposal(h,d,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:n}=this,a=f(i.leftEdge.leftVertex.pos,n,e),o=f(i.rightEdge.rightVertex.pos,n,e);return this._processCandidateProposal(a,o,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const n=se(U,c(s),c(e),.5),a=.5*D(c(s),c(e)),o=de(U,c(t),n,a),h=F(I(o[0],o[1],t[2])),{spatialReference:d,pointer:p}=i,g=x(t,d,u,this.view);if(_(g,x(h,d,u,this.view))<this.squaredProximityThreshold(p)){if(this.isVertical(s,h,i)||this.isVertical(h,e,i))return;r.push(new xe({targetPoint:h,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const U=N();let w=class extends ie{constructor(l){super(l),this.updating=!1,this._snappers=new re,this._domain=le.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new me(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(l){this._set("options",l);for(const s of this._snappers)s.options=l}async fetchCandidates(l,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(l,e))t.push(r);return ce(l,t),t}};L([T({readOnly:!0})],w.prototype,"updating",void 0),L([T({constructOnly:!0})],w.prototype,"view",void 0),L([T({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),L([T()],w.prototype,"options",null),w=L([ne("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
