import{ac as s,s as m,aG as p}from"./index-CExwPuvJ.js";import{p as a}from"./MeshVertexAttributes-Bvowz2UX.js";import{B as n}from"./vertexSpaceConversion-jWbGTWrg.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-CSP-gDCw.js";import"./computeTranslationToOriginAndRotation-CJUYnqhs.js";import"./projectPointToVector-D-MiMdO_.js";import"./meshVertexSpaceUtils-CQhyB4zm.js";import"./MeshLocalVertexSpace-CvnNDao1.js";import"./vec3--Y245Mjj.js";import"./BufferView-BU8IDgS5.js";import"./vec42-C58QokUh.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-BFsuJZyQ.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
