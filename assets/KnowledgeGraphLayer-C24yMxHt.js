import{eQ as T,eR as D,eS as _,V as m,w as S,eW as L,a6 as v,s as p,cJ as l,e$ as A,i as y,ar as c,eV as k,f0 as N,f1 as M,f2 as C,ey as I,bC as E,n,u as r,bq as G,bt as $,v as R}from"./index-B8xXt3oP.js";import{I as u,i as g,E as O,m as x,h as U}from"./KnowledgeGraphSublayer-DqMY8m26.js";import{S as K}from"./MultiOriginJSONSupport-DmGXGugV.js";import{l as F}from"./ArcGISService-QKLpfQ5z.js";import{e as j}from"./CustomParametersMixin-zumBenRL.js";import{b as z,y as P}from"./OperationalLayer-vAne1WPu.js";import{j as H}from"./PortalLayer-CgCzJuEH.js";import{f as V}from"./RefreshableLayer-Bu9zDIpK.js";import{u as q}from"./knowledgeGraphService-BXIFBVNo.js";import"./OptimizedFeature-UgFrRqcY.js";import"./memoryEstimations-DY00BK4o.js";import"./constants-B4mRqufT.js";import"./featureConversionUtils-DXDLMTBw.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./Relationship-B8Fp0bXI.js";import"./FeatureStore-pRxCQyRp.js";import"./BoundsStore-zY6Cv5YY.js";import"./PooledRBush-BvMNLL_M.js";import"./timeSupport-DBUrhqEx.js";import"./queryUtils-BTakVHbq.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-Cv2MfYFA.js";import"./QueryEngine-BNH3i-TH.js";import"./WhereClauseCache-DnAEOb8X.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./WhereClause-ChD-DSvm.js";import"./TimeOnly-D91NAFNv.js";import"./enum-B2GTxHxe.js";import"./UnknownTimeZone-BROmPhr1.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-NZeoNVDs.js";import"./utils-DJAMogOl.js";import"./heatmapUtils-Blo3CKfc.js";import"./vec42-B8V8Ss_9.js";import"./vec4f64-DPb6J-GU.js";import"./utils-0CO-OlJd.js";import"./utils-CoxU-G0a.js";import"./ClassBreaksDefinition-Di8r8jgm.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-CxmmAB-7.js";import"./NormalizationBinParametersMixin-DZHk0pms.js";import"./FieldsIndex-DRgmiPRe.js";import"./clientSideDefaults-pvQczSo_.js";import"./defaultsJSON-GKolV7NZ.js";import"./fieldProperties-DCPDzuFL.js";import"./labelingInfo-BmClriS_.js";import"./SimpleRenderer-B1ZJjhgp.js";import"./commonProperties-8064Jpnx.js";import"./colorRamps-CUgdObZt.js";import"./ColorStop-Burhr3Fz.js";import"./visualVariableUtils-BmrkmdIa.js";import"./jsonUtils-BM8Y794o.js";import"./defaults3D-Bf8kt9Ji.js";import"./defaults-Cc8aB_4Q.js";import"./UniqueValueRenderer-DKmQGCck.js";import"./diffUtils-DufdeOAi.js";import"./RendererLegendOptions-DV2FGTWm.js";import"./styleUtils-BgBkID0K.js";import"./labelUtils-BuZC9Yns.js";import"./DisplayFilteredLayer-Cwoh082G.js";import"./scaleUtils-DzXGpvik.js";import"./displayFilterUtils-_vgQgsGs.js";import"./FeatureEffectLayer-Cci5wQdH.js";import"./FeatureEffect-BOlgy7rp.js";import"./FeatureFilter-jtEGWi9w.js";import"./FeatureReductionLayer-CGX0hoWE.js";import"./FeatureReductionSelection-Chmmo7TT.js";import"./jsonUtils-p2KqCcuA.js";import"./typeUtils-BHxgFsBC.js";import"./ClassBreaksRenderer-CE5zzDNd.js";import"./DictionaryScriptEvaluator-BDYXQdt7.js";import"./ArcadeExpression-B4nQQTbb.js";import"./utils-vSs1juDA.js";import"./defaultCIMValues-B0_T2GCo.js";import"./enums-Da5QEGm1.js";import"./OrderedLayer-DYfx2HDt.js";import"./OrderByInfo-iT_54SJL.js";import"./TemporalLayer-P4VYAppf.js";import"./TimeInfo-DpugHSNS.js";import"./popupUtils-5cGGUsht.js";import"./utils-CMcH35HU.js";import"./cimSymbolUtils-cITKCAEr.js";import"./portalItemUtils-CyFkIVHW.js";let o=class extends T(D(V(F(z(H(K(j(_)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(m.ofType(u)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(m.ofType(u)),this.type="knowledge-graph",this.url=null,this.addHandles(S((()=>this.layers.concat(this.tables)),((i,t)=>this._handleSublayersChange(i,t)),L))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){v(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await g(this)}async _fetchMetadata(){if(!this.url)throw new p("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await q(this.url);this.knowledgeGraph=e,this._forEachGraphType((i=>{i.name&&this._graphTypeLookup.set(i.name,i)}))}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===l.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new O({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await x(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach((i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})})),this.setAtOrigin("inclusionModeDefinition",e,A(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach(((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(y.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))}));else if(!e.generateAllSublayers)throw new p("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach(((s,d)=>{const h=this._graphTypeLookup.get(d);switch(h?.type){case"relationship":i.push(h);break;case"entity":e.push(h)}})),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach((i=>{e(i)}))}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some((s=>s.objectType.name===a.typeName))===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),c(this.sublayerIdsCache,a.typeName,(()=>new Set)).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await g(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach((a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)}))}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach((t=>{t.parentCompositeLayer=this;const a=e.find((s=>s.type===t.graphType&&s.name===t.graphTypeName));a&&(t.objectType=a,this._updateSublayerCaches(a))}))}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(B(this.inclusionModeDefinition).then((s=>{const d=J(a);e[i]=d.itemRelativeUrl,t.toAdd.push({resource:d,content:{type:"blob",blob:s},compress:!1,finish:h=>{this.definitionSetMap=h.url}})})))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach((t=>{t.parent=null})),this.removeHandles("sublayers-owner")),e&&(e.forEach((t=>{t.parent=this})),this.addHandles([e.on("after-add",(({item:t})=>{t.parent=this})),e.on("after-remove",(({item:t})=>{t.parent=null}))],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=l.PORTAL_ITEM&&e<l.USER}readDefinitionSetMap(e,i,t){return k(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,d=a?.resources,h=N(a?.origin);if(!s||!d||h==null)return void(e&&(i[t]=M(e,a)));const{inclusionModeDefinition:w}=this;if(!w||this._displaysAllRecords(w))return void(this.definitionSetMap=null);const f=this.originIdOf("inclusionModeDefinition");if(f===l.USER||this._namedTypesModified||h<f)this._saveUrlAsNewResource(i,t,d,s);else if(h===f&&e){const b=M(e,a);C(b)?this._saveUrlAsNewResource(i,t,d,s):i[t]=b}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):y.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===l.DEFAULTS?this.originIdOf("layers")===l.DEFAULTS?this._createSublayers(e,this.layers,(i=>!!i.geometryType)):this._updateSublayers(e,this.layers):this.layers=new m,this.tables.length||this.originIdOf("layers")===l.DEFAULTS?this.originIdOf("tables")===l.DEFAULTS?this._createSublayers(e,this.tables,(i=>!i.geometryType)):this._updateSublayers(e,this.tables):this.tables=new m,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((i,t)=>{const a=c(this.sublayerIdsCache,t,(()=>new Set));i.members?.forEach((s=>{a.add(s.id)}))}))}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),c(this.sublayerIdsCache,e,(()=>new Set));const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await g(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?y.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||y.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&y.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())c(this.sublayerIdsCache,e,(()=>new Set)),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};n([r()],o.prototype,"dataManager",void 0),n([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],o.prototype,"definitionSetMap",void 0),n([G("definitionSetMap")],o.prototype,"readDefinitionSetMap",null),n([$("definitionSetMap")],o.prototype,"writeDefinitionSetMap",null),n([r()],o.prototype,"inclusionModeDefinition",null),n([r()],o.prototype,"knowledgeGraph",void 0),n([r({type:m.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"layers",void 0),n([r()],o.prototype,"memberEntityTypes",void 0),n([r()],o.prototype,"memberRelationshipTypes",void 0),n([r({type:["KnowledgeGraphLayer"]})],o.prototype,"operationalLayerType",void 0),n([r()],o.prototype,"sublayerIdsCache",void 0),n([r({type:m.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"tables",void 0),n([r({json:{read:!1}})],o.prototype,"type",void 0),n([r(P)],o.prototype,"url",void 0),o=n([R("esri.layers.KnowledgeGraphLayer")],o);const Li=o;async function B(e){const i=await U(e);return new Blob([i],{type:"application/x-protobuf"})}function J(e){const i=`definitionSetMap-${I()}.dat`,t=E("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{Li as default};
