import{ac as s,s as m,aG as p}from"./index-B8xXt3oP.js";import{p as a}from"./MeshVertexAttributes-BqXXb_Yz.js";import{B as n}from"./vertexSpaceConversion-Cr6nQG4w.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-C6YFKnxJ.js";import"./computeTranslationToOriginAndRotation-A3Fdb7wF.js";import"./projectPointToVector-BaiGaCu2.js";import"./meshVertexSpaceUtils-CTwXXbN-.js";import"./MeshLocalVertexSpace-Cd0byCn3.js";import"./vec3-CuKNbyhZ.js";import"./BufferView-E8CM-rPj.js";import"./vec42-B8V8Ss_9.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-BXb1RUUF.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
