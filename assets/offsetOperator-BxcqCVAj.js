import{fI as p,L as x}from"./index-s9Itg6e4.js";import{w as d,j as y}from"./operatorOffset-DI_7ov2W.js";import{getSpatialReference as c,fromGeometry as G,toGeometry as u,fromGeometries as g}from"./jsonConverter-D_6GVZPF.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-BNWuOsL1.js";import"./Envelope2D-BMtfOHN9.js";import"./Point2D-CD2RJRJ9.js";import"./Transformation2D-Cvw8Af54.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function w(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:f="round",unit:r}=n,o=c(e);r&&o&&(t=p(t,r,o));const m=G(e),i=m.getSpatialReference();return u(d(m.getGeometry(),i,t,l[f],a,s),i)}function B(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:f="round",unit:r}=n,o=c(e);r&&o&&(t=p(t,r,o));const[m,i]=g(e);return y(m,i,t,l[f],a,s).map((j=>u(j,i))).filter(x)}export{w as execute,B as executeMany};
