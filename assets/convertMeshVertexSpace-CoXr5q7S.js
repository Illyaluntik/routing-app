import{a9 as s,s as m,aG as p}from"./index-CzeihLq6.js";import{p as a}from"./MeshVertexAttributes-1cL7Ct9y.js";import{B as n}from"./vertexSpaceConversion-C_OcrApy.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-CSdM_j7t.js";import"./computeTranslationToOriginAndRotation-CdJCSEh1.js";import"./projectPointToVector-DOi5Ibdp.js";import"./meshVertexSpaceUtils-CbuYjL7d.js";import"./MeshLocalVertexSpace-COrUDhww.js";import"./vec3-Sm4alpQ6.js";import"./BufferView-CtUe-O9Z.js";import"./vec42-CGkR4OpH.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-s9_9txYD.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
