import{ac as s,s as m,aG as p}from"./index-B39Y-yxe.js";import{p as a}from"./MeshVertexAttributes-D__QXsb_.js";import{B as n}from"./vertexSpaceConversion-Bzify6ZO.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-B_O4-OaS.js";import"./computeTranslationToOriginAndRotation-DH8LFGdz.js";import"./projectPointToVector-D13F6l1j.js";import"./meshVertexSpaceUtils-9qAUifCu.js";import"./MeshLocalVertexSpace-qAEZo8hx.js";import"./vec3-D-qaHMcX.js";import"./BufferView-Djnyt1yj.js";import"./vec42-CYeXmv5p.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-C_V3TmMw.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
