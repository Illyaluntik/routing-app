import{aX as F,aW as T}from"./index-DVueJeH0.js";import{i as $}from"./CIMResourceManager-D8Echs81.js";import{a as G,h as j,u as q}from"./UpdateTracking2D-CRs0gtig.js";import{v as A}from"./OverrideHelper-JZlY737d.js";import{T as S,R as z}from"./rasterizingUtils-LfP-dpB5.js";import{z as D}from"./utils-0FipLf9Z.js";import"./BidiEngine-QXap_35O.js";import"./OptimizedFeature-B6tCc0Fw.js";import"./memoryEstimations-BcvSY_3G.js";import"./GeometryUtils-D4IK7G57.js";import"./enums-Da5QEGm1.js";import"./defaultCIMValues-B0_T2GCo.js";import"./Rect-CUzevAry.js";import"./Utils-CYafm8A-.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./defaults-BcIFANsl.js";import"./defaultsJSON-GKolV7NZ.js";import"./colorUtils-BoovcAoo.js";import"./vec42-cDE3-gTJ.js";import"./vec4f64-DPb6J-GU.js";import"./FieldsIndex-CK4mbtzl.js";import"./UnknownTimeZone-Dg1lf0_a.js";import"./ArcadeExpression-DcMx8yOp.js";import"./TimeOnly-CFDlcqhZ.js";import"./enum-DIZxwjYA.js";import"./quantizationUtils-fpzdciyW.js";import"./floatRGBA-BMDCsb6n.js";const B=96/72;class dt{constructor(o){this._spatialReference=o,this._imageDataCanvas=null,this._cimResourceManager=new $}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(o,n,m,R,I,s,c,l,p,x){if(!o)return null;const{data:d}=o;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:v}=d;s||(s=D(v));const a=await A.resolveSymbolOverrides(d,n,this._spatialReference,I,s,c,l),w=this._cimResourceManager,b=[];G.fetchResources(a,w,b),G.fetchFonts(a,w,b),b.length>0&&await Promise.all(b);const{width:e,height:r}=m;let y=E(s,e,r,R,x);const t=G.getEnvelope(a,y,w);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let g=1,_=0,C=0;switch(v.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let h=1;t.height>r&&(h=r/t.height),R==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(h=r/t.height)),g=Math.min(i,h),_=t.x+t.width/2,C=t.y+t.height/2}break;case"CIMLineSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:S(y.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{(p||t.height>r)&&(g=r/t.height),C=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,M=F(y)?y.paths:T(y)?y.rings:null;if(M===null)throw new Error("Bad geometry, can't rasterise symbol!");M[0][0][0]-=i/g,M[0][2][0]-=(h-e)/g}break;case"CIMPolygonSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:S(y.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{_=t.x+t.width/2,C=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,M=t.y*g+r/2,P=(t.y+t.height)*g+r/2,{rings:u}=y;i<0&&(u[0][0][0]-=i,u[0][3][0]-=i,u[0][4][0]-=i),M<0&&(u[0][0][1]+=M,u[0][1][1]+=M,u[0][4][1]+=M),h>e&&(u[0][1][0]-=h-e,u[0][2][0]-=h-e),P>r&&(u[0][2][1]+=P-r,u[0][3][1]+=P-r)}}const k={type:"cim",data:{type:"CIMSymbolReference",symbol:a}};return this.rasterize(k,e,r,_,C,g,s,1,y)}rasterize(o,n,m,R,I,s,c,l=0,p=null,x=window.devicePixelRatio||1){const{data:d}=o;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:v}=d,a=this._canvas,w=x*B;a.width=n*w,a.height=m*w,c||(c=D(v)),p||(p=E(c,n,m,"legend")),a.width+=2*l,a.height+=2*l;const b=a.getContext("2d",{willReadFrequently:!0}),e=j.createIdentity();return e.translate(-R,-I),e.scale(s*w,-s*w),e.translate(n*w/2+l,m*w/2+l),b.clearRect(0,0,a.width,a.height),new q(b,this._cimResourceManager,e,!0).drawSymbol(v,p),b.getImageData(0,0,a.width,a.height)}}function L(f,o,n,m){return o==="esriGeometryPolygon"?{rings:z(S(f.rings,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:o==="esriGeometryPolyline"?{paths:z(S(f.paths,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:null}function E(f,o,n,m,R){const s=-o/2+1,c=o/2-1,l=n/2-1,p=-n/2+1;if(R&&(f==="esriGeometryPolygon"||f==="esriGeometryPolyline")){const x=L(R,f,o,n);if(x)return x}switch(f){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[s,0],[0,0],[c,0]]]};default:return m==="legend"?{rings:[[[s,l],[c,0],[c,p],[s,p],[s,l]]]}:{rings:[[[s,l],[c,l],[c,p],[s,p],[s,l]]]}}}export{dt as CIMSymbolRasterizer};
