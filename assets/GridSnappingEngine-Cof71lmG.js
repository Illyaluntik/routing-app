import{aU as O,eJ as U,fT as E,ag as F,fU as X,i as Y,b3 as D,fV as j,n as o,u as p,v as T}from"./index-B39Y-yxe.js";import{u as W}from"./scaleUtils-DsB48uVy.js";import{l as H,u as I,t as J}from"./gridUtils-DVPlSXim.js";import{f as d,d as _,c as k}from"./hitTestSelectUtils-pZPznmrY.js";import{r as G,a as q}from"./RouteLayerInteraction-CzGSzJQs.js";import"./geodesicUtils-ERF5DK2R.js";import"./quantityUtils-BZcHQoTJ.js";import"./projectVectorToVector-kW81q-3n.js";import"./projectPointToVector-D13F6l1j.js";import"./vec42-CYeXmv5p.js";import"./vec4f64-DPb6J-GU.js";import"./plane-BYxBkq9_.js";import"./vectorStacks-BeCHWK8E.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-GYv1PGAW.js";import"./elevationInfoUtils-Belr1kvR.js";import"./spatialReferenceEllipsoidUtils-B_O4-OaS.js";import"./Stop-C4FjHwUE.js";import"./geodeticLengthOperator-CTuhp4Vb.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-DgQOWnzX.js";import"./lineSegment-COlb2mon.js";let s=class extends O{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:r}=this;if(!r||!t||!E(r.center.spatialReference,t))return null;try{const e=F(r.center,t),i=t.isWrappable&&this.view?.center!=null?X(e.x,this.view.center.x,t):e.x;return d(i,e.y,e.z)}catch(e){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:r}=this;if(!r||!t)return 1;const{majorLineInterval:e,dynamicScaling:i}=r;return e<1?null:H(e,t,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?D(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:r}=this;return r&&t?t/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,r,e){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||e.feature?.attributes&&_ in e.feature.attributes)return[];const a=e.coordinateHelper.arrayToPoint(t),l=i.distance*(e.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(t,r){const e=[],{grid:i,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:m,viewMetersPerSRUnit:f,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(i&&m&&f&&l&&g&&S&&C&&$)||!i.dynamicScaling&&$<J||!E(t.spatialReference,g))return e;const y=F(t,g),z=d(y.x,y.y,y.z),u=h(z,-a,l,-n),P=C/f*S,c=A(u,P,l),{shouldSnapX:v,shouldSnapY:w}=B(c,u,r,m,f);if(!v&&!w)return[];const L=d((v?c:u)[0],(w?c:u)[1]),M=h(L,a,l,n),b=h(c,a,l,n);if(w){const R=V(c,u,P,"y"),x=h(R,a,l,n);e.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(v){const R=V(c,u,P,"x"),x=h(R,a,l,n);e.push(new G({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return v&&w&&e.push(new q(M,e[0],e[1],!1)),e}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([T("esri.views.interactive.snapping.GridSnappingEngine")],s);const h=(t,r,e,i)=>{const n=k(t[0],t[1],t[2]);return j(n,j(n,n,e,r),e,i)},A=(t,r,e)=>{const i=(t[0]-e[0])/r,n=(t[1]-e[1])/r,a=Math.trunc(i),l=Math.trunc(n),m=Math.round(i%1),f=Math.round(n%1),S=e[0]+(a+m)*r,g=e[1]+(l+f)*r;return d(S,g)},B=(t,r,e,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(t[0]-r[0])/i,l=(t[1]-r[1])/i;return{shouldSnapX:Math.abs(a*n)<e,shouldSnapY:Math.abs(l*n)<e}},V=(t,r,e,i)=>{if(i==="y"){const a=r[0]>t[0]?1:-1;return d(t[0]+e*a,t[1])}const n=r[1]>t[1]?1:-1;return d(t[0],t[1]+e*n)};export{s as GridSnappingEngine};
