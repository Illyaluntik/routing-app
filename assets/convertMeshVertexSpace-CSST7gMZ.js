import{a9 as s,s as m,aG as p}from"./index-DVueJeH0.js";import{p as a}from"./MeshVertexAttributes-DPMce4EN.js";import{B as n}from"./vertexSpaceConversion-CVU2qA8m.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-DF0aPhl6.js";import"./computeTranslationToOriginAndRotation-Dfg_eCtA.js";import"./projectPointToVector-Di8RkeHr.js";import"./meshVertexSpaceUtils-BHAmm_Ge.js";import"./MeshLocalVertexSpace-B5qlxy6A.js";import"./vec3-1qqjF9_i.js";import"./BufferView-C231-rFY.js";import"./vec42-cDE3-gTJ.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-BLy8Vq6l.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
