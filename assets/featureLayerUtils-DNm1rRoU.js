const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/CatalogLayer-CCLAEEi0.js","assets/index-Dew1EvIF.js","assets/index-UDJfKx5H.css","assets/MultiOriginJSONSupport-C7cMD6_J.js","assets/LRUCache--7okbBjw.js","assets/MemCache-CYsUaMUi.js","assets/OperationalLayer-DGU0-gfu.js","assets/OrderByInfo-GWS0rirB.js","assets/utils-C1GtCJVY.js","assets/ClassBreaksDefinition-DzeRoGYm.js","assets/FeatureLayerBase-5CaQF5yk.js","assets/labelingInfo-BuqMKj5l.js","assets/SimpleRenderer-BJ9W2MPu.js","assets/commonProperties-nPMw4okf.js","assets/colorRamps-B91Byf_c.js","assets/ColorStop-C6iy7W0_.js","assets/visualVariableUtils-f_v1WgZx.js","assets/jsonUtils-BUyqjrCW.js","assets/defaults3D-C_BBOZCJ.js","assets/defaults-D3Cv9_Ke.js","assets/defaultsJSON-GKolV7NZ.js","assets/UniqueValueRenderer-CwnryRrJ.js","assets/diffUtils-BE3cTqsC.js","assets/RendererLegendOptions-D0MVApXA.js","assets/styleUtils-CBZIkeqD.js","assets/NormalizationBinParametersMixin-BaaJwiNs.js","assets/labelUtils-nGnaSw3M.js","assets/LayerFloorInfo-B7uTN-6s.js","assets/Relationship-BLIUK0fr.js","assets/serviceCapabilitiesUtils-DJEk4a6h.js","assets/infoFor3D-VMSlSy0z.js","assets/portalItemUtils-DLNruFmt.js","assets/FeatureEffectLayer-DXr9Jq2W.js","assets/FeatureEffect-CCqSjx6O.js","assets/FeatureFilter-bwUF2zRc.js","assets/typeUtils-BkklGB44.js","assets/ClassBreaksRenderer-DtjARRhG.js","assets/DictionaryScriptEvaluator-C0_FUI88.js","assets/FieldsIndex-Cdya2OBl.js","assets/UnknownTimeZone-BruLdDqT.js","assets/ArcadeExpression-DziyN578.js","assets/TimeOnly-Brk3x2oJ.js","assets/enum-B0n7OVsN.js","assets/utils-B6LHIIdb.js","assets/defaultCIMValues-B0_T2GCo.js","assets/enums-Da5QEGm1.js","assets/heatmapUtils-DSnG1Lzz.js","assets/vec42-P6fSsgl_.js","assets/vec4f64-DPb6J-GU.js","assets/popupUtils-DU5NzNt3.js","assets/FeatureLayerSource-DMkUxnw6.js","assets/MeshLocalVertexSpace-Dxnb0b_3.js","assets/meshVertexSpaceUtils-CD6c08vw.js","assets/External-OG0aPhwS.js","assets/MeshTransform-o5eVH2xL.js","assets/mat4f64-q_b6UJoq.js","assets/quat-Dax7KEMl.js","assets/mat3f64-B5o_lm6j.js","assets/quatf64-aQ5IuZRd.js","assets/axisAngleDegrees-DcRiGf5t.js","assets/editingSupport-B2dy-wWn.js","assets/EditBusLayer-Dq70euvv.js","assets/clientSideDefaults-CpXXCmYa.js","assets/QueryEngineCapabilities-CsRUnGk7.js","assets/QueryTask-BJKxxtf8.js","assets/executeForIds-C7G_GwAO.js","assets/query-DdxMw17s.js","assets/pbfQueryUtils-CkZ8AmTM.js","assets/pbf-BoXlxi6y.js","assets/memoryEstimations-Bn0E1Q7f.js","assets/OptimizedFeature-Ct5pyIL3.js","assets/OptimizedFeatureSet-BR8EEvDc.js","assets/queryZScale-DEGJOLij.js","assets/executeQueryJSON-DBzggM_P.js","assets/featureConversionUtils-CLoucyBw.js","assets/editsZScale-YVG_do60.js","assets/APIKeyMixin-CeqHqJxQ.js","assets/ArcGISService-CcpBZ4aq.js","assets/CustomParametersMixin-D6SkAff0.js","assets/DisplayFilteredLayer-CJdLnGIg.js","assets/scaleUtils-DwqSbNqW.js","assets/displayFilterUtils-btDsz6nF.js","assets/OrderedLayer-BayNm_D4.js","assets/PortalLayer-Ai94gWLG.js","assets/RefreshableLayer-BTTDGDdz.js","assets/TemporalLayer-Bd-ocaIx.js","assets/TimeInfo-Pe6_qjJ7.js","assets/FeatureType-ZPeZJ7C_.js","assets/FeatureTemplate-Cs9gD2L9.js","assets/fieldProperties-BkUmpC6t.js","assets/versionUtils-B9itDBm4.js","assets/FeatureLayer-DPQrXZR_.js","assets/FeatureReductionLayer-CL6ym591.js","assets/FeatureReductionSelection-rNCZnb0m.js","assets/jsonUtils-CuVVez9u.js","assets/TrackableLayer-DIMsci1s.js","assets/TitleCreator-D0zJLrJM.js","assets/styleUtils-D1JyN4-E.js","assets/interfaces-CL2NbQte.js","assets/OrientedImageryLayer-C0k_yJeG.js"])))=>i.map(i=>d[i]);
import{p as d,L as V,s as y,eB as k,fq as K,_ as E,fr as z}from"./index-Dew1EvIF.js";import{i as w}from"./originUtils-CGcjwL6o.js";import{P as H,w as O,d as j,v as q,$ as Q,p as g,f as W,I as x,m as L}from"./utils-CEU6urtf.js";import{n as X,l as Z}from"./fetchService-8l8bBTLd.js";import{o as ee}from"./jsonContext-Cpt0iOmW.js";import{l as N,u as f,E as u,s as ae,c as te}from"./portalItemUtils-DLNruFmt.js";import"./saveUtils-CHuPCFu-.js";const T="Feature Service",v="feature-layer-utils",re=`${v}-save`,ne=`${v}-save-as`,p=`${v}-saveall`,m=`${v}-saveall-as`;function S(e){return{isValid:z(e)&&(!("dynamicDataSource"in e)||!e.dynamicDataSource),errorMessage:"Feature layer should be a layer or table in a map or feature service"}}function b(e,a){const t=ee(e,"portal-item");return a?.isTable&&(t.layerContainerType="tables"),t}function R(e){const a=b(e),t=b(e);return t.layerContainerType="tables",{forLayers:a,forTables:t}}function D(e){const a=[],t=[];for(const{layer:r,layerJSON:o}of e)se(r)?t.push(o):a.push(o);return{layers:a,tables:t}}function se(e,a){return e.isTable}function J(e){return D([e])}async function G(e,a){return/\/\d+\/?$/.test(e.url)?J(a[0]):U(a,e)}async function U(e,a){if(e.reverse(),!a)return D(e);const t=await oe(a,e);for(const r of e)C(r.layer,r.layerJSON,t);return ce(t,e),t}async function oe(e,a){let t=await e.fetchData("json");if(le(t)&&!ae(e,u.HOSTED_SERVICE))return t;t||={},ie(t);const{layer:{url:r,customParameters:o,apiKey:s}}=a[0];return await ue(t,{url:r??"",customParameters:o,apiKey:s},a.map((n=>n.layer.layerId))),t}function le(e){return!!(e&&Array.isArray(e.layers)&&Array.isArray(e.tables))}function ie(e){e.layers||=[],e.tables||=[]}function ce(e,a){const t=[],r=[];for(const{layer:o}of a){const{isTable:s,layerId:n}=o;s?r.push(n):t.push(n)}P(e.layers,t),P(e.tables,r)}function P(e,a){if(e.length<2)return;const t=[];for(const{id:r}of e)t.push(r);k(t.sort($),a.slice().sort($))&&e.sort(((r,o)=>{const s=a.indexOf(r.id),n=a.indexOf(o.id);return s<n?-1:s>n?1:0}))}function $(e,a){return e<a?-1:e>a?1:0}async function ue(e,a,t){const{url:r,customParameters:o,apiKey:s}=a,{serviceJSON:n,layersJSON:l}=await X(r,{customParameters:o,apiKey:s}),i=_(e.layers,n.layers,t),c=_(e.tables,n.tables,t);e.layers=i.itemResources,e.tables=c.itemResources;const h=[...i.added,...c.added],B=l?[...l.layers,...l.tables]:[];await ye(e,h,r,B)}function _(e,a,t){const r=K(e,a,((s,n)=>s.id===n.id));e=e.filter((s=>!r.removed.some((n=>n.id===s.id))));const o=r.added;return o.forEach((({id:s})=>{e.push({id:s})})),{itemResources:e,added:o.filter((({id:s})=>!t.includes(s)))}}async function ye(e,a,t,r){const o=await fe(a),s=a.map((({id:n,type:l})=>new(o.get(l))({url:t,layerId:n,sourceJSON:r.find((({id:i})=>i===n))})));await Promise.allSettled(s.map((n=>n.load()))),s.forEach((n=>{const{layerId:l,loaded:i,defaultPopupTemplate:c}=n;if(!i||c==null)return;const h={id:l,popupInfo:c.toJSON()};C(n,n.operationalLayerType==="ArcGISFeatureLayer"?h:{...h,layerType:n.operationalLayerType},e)}))}async function fe(e){const a=[];e.forEach((({type:o})=>{switch(Z(o)){case"CatalogLayer":a.push(E(()=>import("./CatalogLayer-CCLAEEi0.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90])).then((s=>s.default)));break;case"FeatureLayer":a.push(E(()=>import("./FeatureLayer-DPQrXZR_.js"),__vite__mapDeps([91,1,2,3,10,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,75,72,76,77,78,79,80,81,61,32,33,34,92,93,94,35,36,4,5,37,38,39,40,41,42,43,44,45,46,47,48,82,7,83,84,85,86,95,88,87,89,96,90,97,49,98])).then((s=>s.default)));break;case"OrientedImageryLayer":a.push(E(()=>import("./OrientedImageryLayer-C0k_yJeG.js"),__vite__mapDeps([99,1,2,91,3,10,6,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,75,72,76,77,78,79,80,81,61,32,33,34,92,93,94,35,36,4,5,37,38,39,40,41,42,43,44,45,46,47,48,82,7,83,84,85,86,95,88,87,89,96,90,97,49,98])).then((s=>s.default)))}}));const t=await Promise.all(a),r=new Map;return e.forEach((({type:o},s)=>{r.set(o,t[s])})),r}function C(e,a,t){e.isTable?A(t.tables,a):A(t.layers,a)}function A(e,a){const t=e.findIndex((({id:r})=>r===a.id));t===-1?e.push(a):e[t]=a}function F(e,a){if(!e.length)throw new y(`${a}:missing-parameters`,"'layers' array should contain at least one feature layer")}function pe(e,a){const t=e.map((r=>r.portalItem.id));if(new Set(t).size>1)throw new y(`${a}:invalid-parameters`,"All layers in the 'layers' array should be loaded from the same portal item")}function M(e,a){const t=e.map((r=>r.layerId));if(new Set(t).size!==t.length)throw new y(`${a}:invalid-parameters`,"'layers' array should contain only one instance each of layer or table in a feature service")}async function me(e){F(e,p),await Promise.all(e.map((a=>a.load())));for(const a of e)g(a,p,S),W({layer:a,itemType:T,errorNamePrefix:p});pe(e,p),M(e,p)}function de(e){if(!("layerType"in e))return!!e.charts?.length;switch(e.layerType){case"OrientedImageryLayer":return!!e.charts?.length;case"SubtypeGroupLayer":return!!e.layers.some((a=>!!a.charts?.length));case"SubtypeGroupTable":return!!e.tables.some((a=>!!a.charts?.length));case"CatalogLayer":return!!e.footprintLayer?.charts?.length}}function I(e,a){let t=0,r=0,o=0,s=0;for(const n of[...a.layers,...a.tables])if(de(n)&&s++,"layerType"in n)switch(n.layerType){case"OrientedImageryLayer":t++;break;case"SubtypeGroupLayer":r++;break;case"SubtypeGroupTable":o++}f(e,u.ORIENTED_IMAGERY_LAYER,t>0),f(e,u.SUBTYPE_GROUP_LAYER,r>0),f(e,u.SUBTYPE_GROUP_TABLE,o>0),f(e,u.CHARTS,s>0)}function Y(e,a,t){te(a,u.METADATA),f(a,u.MULTI_LAYER,e.length>1),f(a,u.SINGLE_LAYER,e.length===1),f(a,u.TABLE,t.tables.length>0&&t.layers.length===0),I(a,t)}async function he(e,a,t){I(a,t)}async function we(e,a,t){const{url:r,layerId:o,title:s,fullExtent:n,isTable:l}=e,i=d(r);a.url=(i?.serverType==="FeatureServer"?r:`${r}/${o}`)??null,a.title||=s,a.extent=null,l||n==null||(a.extent=await N(n)),Y([e],a,t)}function be(e,a){for(const s of e){const n=s.parsedUrl.path,l=d(n);if(!l?.url.path)throw new y(`${a}:invalid-parameters`,L(s,`has unsupported url pattern: ${n}`),{layer:s});const c=l?.serverType;if(c!=="FeatureServer"&&c!=="MapServer")throw new y(`${a}:invalid-parameters`,L(s,`has unsupported server type: ${c}`),{layer:s});if(c==="MapServer"&&e.length>1)throw new y(`${a}:invalid-parameters`,"Only one layer or table in a map service can be saved")}const t=d(e[0].parsedUrl.path),r=t?.url.path;if(!e.every((s=>d(s.parsedUrl.path)?.url.path===r)))throw new y(`${a}:invalid-parameters`,"'layers' array should only contain layers or tables that belong to the same feature service")}async function Te(e){F(e,m),await Promise.all(e.map((a=>a.load())));for(const a of e)g(a,m,S);be(e,m),M(e,m)}function ve(e,a){I(e,a),x(e)}async function Se(e,a,t){let r=0;for(const{isTable:n}of e)n||r++;const o=e[0].parsedUrl.path,s=d(o);if(a.url=s?.serverType==="FeatureServer"?s.url.path:o,a.title||=s.title,a.extent=null,r>0){const n=e.map((l=>l.fullExtent)).filter(V).reduce(((l,i)=>l.clone().union(i)));n&&(a.extent=await N(n))}Y(e,a,t),x(a)}async function Oe(e,a){return H({layer:e,itemType:T,validateLayer:S,createJSONContext:t=>b(t,e),createItemData:(t,r)=>G(r,[t]),errorNamePrefix:re,setItemProperties:he},a)}async function ge(e,a){await me(e);const t=e[0].portalItem,r=R(t),o=await Promise.all(e.map((n=>O(n,n.isTable?r.forTables:r.forLayers,a)))),s=await G(t,e.map(((n,l)=>({layer:n,layerJSON:o[l]}))));return ve(t,s),await t.update({data:s}),await Promise.all(e.slice(1).map((n=>n.portalItem.reload()))),w(r.forLayers),w(r.forTables),t.clone()}async function xe(e,a,t){return Q({layer:e,itemType:T,validateLayer:S,createJSONContext:r=>b(r,e),createItemData:(r,o)=>Promise.resolve(J(r)),errorNamePrefix:ne,newItem:a,setItemProperties:we},t)}async function Ne(e,a,t){await Te(e);const r=j({itemType:T,errorNamePrefix:m,newItem:a}),o=R(r),s=await Promise.all(e.map((l=>O(l,l.isTable?o.forTables:o.forLayers,t)))),n=await U(e.map(((l,i)=>({layer:l,layerJSON:s[i]}))));await Se(e,r,n),await q(r,n,t);for(const l of e)l.portalItem=r.clone();return w(o.forLayers),w(o.forTables),r}export{Oe as save,ge as saveAll,Ne as saveAllAs,xe as saveAs};
