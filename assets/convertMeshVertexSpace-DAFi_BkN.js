import{ac as s,s as m,aG as p}from"./index-s9Itg6e4.js";import{p as a}from"./MeshVertexAttributes-DcWOALU_.js";import{B as n}from"./vertexSpaceConversion-4H3a5PkS.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-D959JfKe.js";import"./computeTranslationToOriginAndRotation-Cx6cMqhW.js";import"./projectPointToVector-mLRDDohG.js";import"./meshVertexSpaceUtils-DF8DF0bl.js";import"./MeshLocalVertexSpace-BegHtySz.js";import"./vec3-BGy2PwlZ.js";import"./BufferView-B3AbAT3z.js";import"./vec42-CHSyd2wv.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-zxiONlBr.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
