import{n as s,u as n,v as l,w as m,s as u,fZ as h,f as d,y as c,e5 as y}from"./index-Ve43g09f.js";import{n as _,c as g}from"./FeatureLayerView2D-B3ZS8R3D.js";import{d as f}from"./FeatureFilter-onHlm9yX.js";import"./Container-CqvlhMXq.js";import"./featureConversionUtils-BT4AmYN8.js";import"./OptimizedFeature-BRu5yrIk.js";import"./memoryEstimations-Cm1ZsWKy.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./labelingInfo-BDFkCOAx.js";import"./SimpleRenderer-CbBM5XWx.js";import"./commonProperties-BvIfGSEM.js";import"./colorRamps-DlOzfrHz.js";import"./ColorStop-DGLSmKNE.js";import"./visualVariableUtils-CNGz3asb.js";import"./jsonUtils-fcmsmCTS.js";import"./defaults3D-ps586OwG.js";import"./defaults-wNRmWZPn.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-DmOTlFZz.js";import"./diffUtils-Bdtmsmw2.js";import"./RendererLegendOptions-BRotKR10.js";import"./styleUtils-d2Lh0Mv9.js";import"./NormalizationBinParametersMixin-BmfwzWoy.js";import"./labelUtils-Bc0vrbYq.js";import"./timeSupport-CavNoTJT.js";import"./AttributeBinsFeatureSet-p2-HqsRx.js";import"./AttributeBinsQuery-CCAP5Bs0.js";import"./queryUtils-Ed4yg_nQ.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-5kJxNKFQ.js";import"./LayerView-VHShTG-X.js";import"./layerViewUtils-D_a3WMhL.js";import"./TechniqueInstance-CNhvcicf.js";import"./UpdateTracking2D-CcJqWNb3.js";import"./BidiEngine-QXap_35O.js";import"./GeometryUtils-DXAYzX4s.js";import"./enums-Da5QEGm1.js";import"./utils-BDA9rAzg.js";import"./defaultCIMValues-B0_T2GCo.js";import"./rasterizingUtils-tSJGvpcn.js";import"./floatRGBA-CozRKTHs.js";import"./Rect-CUzevAry.js";import"./Utils-DlWhH_J_.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-C7M_jJ39.js";import"./ProgramTemplate-DS1WNRfC.js";import"./TileContainer-DnfcN3DB.js";import"./WGLContainer-rKA57NjH.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-H2dD46QT.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-D7q3CXfa.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule--PiLPswo.js";import"./ShaderBuilder-Bgreyl2O.js";import"./BindType-BBwFZqyN.js";import"./utils-Bpyd3d9y.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-BWoKMnvR.js";import"./CircularArray-CujHzHWW.js";import"./OrderByInfo-Cx_tjG3c.js";import"./heatmapUtils-CBqeXjf1.js";import"./vec42-BNPpUHUg.js";import"./vec4f64-DPb6J-GU.js";import"./SDFHelper-r6BWqMVD.js";import"./constants-B4mRqufT.js";import"./bundle-B2FM5W1M.js";import"./displayFilterUtils-DbcBoHRA.js";import"./FeatureEffect-gLNcbNkP.js";import"./floorFilterUtils-n6UOt7ty.js";import"./popupUtils-BRlmGD2W.js";import"./RefreshableLayerView-DDG7k24q.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([n()],t.prototype,"_isUserPaused",void 0),s([n({readOnly:!0})],t.prototype,"connectionStatus",null),s([n({type:f})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let o=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),m((()=>this.layer.purgeOptions),(()=>this._update())),m((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new u("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map((i=>this.on(i,t))));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then((i=>i.streamMessenger.enableEvent(e,!0)));const p=super.on(e,t),a=this;return d((()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then((i=>i.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return _(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((p=>{const a=c.fromJSON(p);return a.features.forEach((i=>{i.layer=this.layer,i.sourceLayer=this.layer})),a})),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(y)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([n()],o.prototype,"pipelineConnectionStatus",void 0),s([n()],o.prototype,"pipelineErrorString",void 0),s([n({readOnly:!0})],o.prototype,"connectionError",null),s([n({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=s([l("esri.views.2d.layers.StreamLayerView2D")],o);const Te=o;export{Te as default};
