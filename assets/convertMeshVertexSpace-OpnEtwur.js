import{ac as s,s as m,aG as p}from"./index-Dew1EvIF.js";import{p as a}from"./MeshVertexAttributes-DiU1Vw5r.js";import{B as n}from"./vertexSpaceConversion-B9ek6dLO.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-DoX01c8c.js";import"./computeTranslationToOriginAndRotation-B92BEZMY.js";import"./projectPointToVector-DzZKg3oy.js";import"./meshVertexSpaceUtils-CD6c08vw.js";import"./MeshLocalVertexSpace-Dxnb0b_3.js";import"./vec3-BEhN-XPh.js";import"./BufferView-BKjCJPoh.js";import"./vec42-P6fSsgl_.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-C5Ye-xuV.js";async function S(t,r,o){await Promise.resolve(),s(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{S as convertMeshVertexSpace};
