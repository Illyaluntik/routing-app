const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-BT6ymspc.js","assets/utils-D8WwJZ8E.js","assets/index-B39Y-yxe.js","assets/index-UDJfKx5H.css","assets/originUtils-jPLX0wmE.js","assets/jsonContext-BZPF83FV.js","assets/portalItemUtils-DDWDjoD8.js","assets/saveUtils-Bz4amNKC.js"])))=>i.map(i=>d[i]);
import{eQ as w,eR as O,eS as _,f3 as $,f4 as E,_ as P,a6 as T,f0 as v,cJ as f,f5 as A,a7 as g,cb as L,cO as R,f6 as F,s as b,l as M,n as i,u as p,f7 as S,bq as j,bt as V,v as J,c9 as N}from"./index-B39Y-yxe.js";import{S as q}from"./MultiOriginJSONSupport-BEHVpdRP.js";import{i as U}from"./scaleUtils-DsB48uVy.js";import{i as k}from"./APIKeyMixin-CgI9SRTR.js";import{m as z,f as W,a as D}from"./SublayersOwner-CnHmH8AU.js";import{l as G}from"./ArcGISService-BGu_W8-n.js";import{e as H}from"./CustomParametersMixin-CUchZgq0.js";import{b as Z,y as B}from"./OperationalLayer-w-Mjnlcp.js";import{j as C}from"./PortalLayer-DlZhrEhg.js";import{f as K}from"./RefreshableLayer-DpSga7_i.js";import{c as Q}from"./TemporalLayer-Dw7uWtFE.js";import{y as X}from"./ExportImageParameters-ByvGkrXw.js";import{t as Y}from"./imageBitmapUtils-DbUyKmnQ.js";import{e as x}from"./sublayerUtils-yYGVIyn3.js";import{t as ee}from"./versionUtils-DHD5RM-_.js";import{A as y}from"./interfaces-CL2NbQte.js";import"./portalItemUtils-DDWDjoD8.js";import"./QueryTask-D52wVuPh.js";import"./infoFor3D-VMSlSy0z.js";import"./executeForIds-CUcbTWhN.js";import"./query-BwqGww32.js";import"./pbfQueryUtils-j6RBCram.js";import"./pbf-HBakJklX.js";import"./memoryEstimations--yPAcH7B.js";import"./OptimizedFeature-DPxwPGqJ.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-BXyYVGpE.js";import"./executeQueryJSON-jDMI94YV.js";import"./featureConversionUtils-CR_JoE9v.js";import"./OrderedLayer-DjnNc293.js";import"./OrderByInfo-CirmPbmL.js";import"./labelingInfo-DJ1H-qMy.js";import"./SimpleRenderer-DTpMoh_4.js";import"./commonProperties-CaJTZYar.js";import"./colorRamps-DV-mPydf.js";import"./ColorStop-BuQ3GnyE.js";import"./visualVariableUtils-CCaHj8y4.js";import"./jsonUtils-DJsB5Hpi.js";import"./defaults3D-Bx7wyIh2.js";import"./defaults-B5oiV-7C.js";import"./defaultsJSON-GKolV7NZ.js";import"./UniqueValueRenderer-Cv6RTrKn.js";import"./diffUtils-DEM4Gxdl.js";import"./RendererLegendOptions-DyXhwYkH.js";import"./styleUtils-KR8gvTiL.js";import"./NormalizationBinParametersMixin-CR_gEyce.js";import"./labelUtils-Crbk3Q7B.js";import"./FeatureType-CuQf4wWB.js";import"./FeatureTemplate-DN2P0r9M.js";import"./FieldsIndex-CSt4KrS5.js";import"./UnknownTimeZone-p0WTj9U2.js";import"./LayerFloorInfo-DJvsgNkJ.js";import"./Relationship-CaV2bscC.js";import"./serviceCapabilitiesUtils-B5o0k8U7.js";import"./typeUtils-DhWIXbuu.js";import"./ClassBreaksRenderer-BRIWkboF.js";import"./LRUCache--7okbBjw.js";import"./MemCache-CYsUaMUi.js";import"./DictionaryScriptEvaluator-CtyYLHiP.js";import"./ArcadeExpression-uGOHP_7_.js";import"./TimeOnly-DG6SAa7M.js";import"./enum-Cjm7-8Hf.js";import"./utils-Du5igZLX.js";import"./defaultCIMValues-B0_T2GCo.js";import"./enums-Da5QEGm1.js";import"./heatmapUtils-DMkYyCGD.js";import"./vec42-CYeXmv5p.js";import"./vec4f64-DPb6J-GU.js";import"./popupUtils-B2MGIyrZ.js";import"./TimeInfo-CkmZTZ67.js";import"./floorFilterUtils-n6UOt7ty.js";let r=class extends w(Q(O(z(W(G(Z(C(q(K(k(H(_)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new X({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new $({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=E((async(t,n,a)=>{const{save:m,saveAs:s}=await P(()=>import("./mapImageLayerUtils-BT6ymspc.js"),__vite__mapDeps([0,1,2,3,4,5,6,7]));switch(t){case y.SAVE:return m(this,n);case y.SAVE_AS:return s(this,a,n)}}))}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(T).then((()=>this._fetchService(t)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const n=t.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,n,a){if(!this.loaded||!e)return;const m=e.slice().reverse().flatten((({sublayers:o})=>o&&o.toArray().reverse())).toArray();let s=!1;const l=v(a.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===f.PORTAL_ITEM){const o=this.createSublayersForOrigin("service").sublayers;s=x(m,o,f.SERVICE)}else if(l>f.PORTAL_ITEM){const o=this.createSublayersForOrigin("portal-item");s=x(m,o.sublayers,v(o.origin)),h=o.originWithPartialOverrides}}const c=[],d={writeSublayerStructure:s,...a,minimumWritableOrigin:h};let u=s||this.hasVisibleLayersForOrigin(l);m.forEach((o=>{const I=o.write({},d);c.push(I),u=u||o.originOf("visible")==="user"})),c.some((o=>Object.keys(o).length>1))&&(t.layers=c),u&&(t.visibleLayers=m.filter((o=>o.visible)).map((o=>o.id)))}createExportImageParameters(e,t,n,a){const m=a?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=a?.floors??null,this._exportImageParameters.scale=U({extent:e,width:t})*m;const s=this._exportImageParameters.toJSON(),l=!a?.rotation||this.version<10.3?{}:{rotation:-a.rotation},h=e?.spatialReference,c=A(h);s.dpi*=m;const d={};if(a?.timeExtent){const{start:u,end:o}=a.timeExtent.toJSON();d.time=u&&o&&u===o?""+u:`${u??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:t+","+n,...s,...l,...d}}async fetchImage(e,t,n,a){const{data:m}=await this._fetchImage("image",e,t,n,a);return m}async fetchImageBitmap(e,t,n,a){const{data:m,url:s}=await this._fetchImage("blob",e,t,n,a);return Y(m,s,a?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,t),{extent:a,fullExtent:m,timeExtent:s}=n,l=a||m;return{fullExtent:l&&R.fromJSON(l),timeExtent:s&&L.fromJSON({start:s[0],end:s[1]})}}loadAll(){return F(this,(e=>{e(this.allSublayers),e(this.subtables)}))}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return ee(this,e)}async _fetchImage(e,t,n,a,m){const s={responseType:e,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,n,a,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(s.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:s.query});try{const{data:h}=await g(l,s);return{data:h,url:l}}catch(h){throw M(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};i([p(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([p()],r.prototype,"dpi",void 0),i([p()],r.prototype,"elevationInfo",void 0),i([p()],r.prototype,"gdbVersion",void 0),i([p()],r.prototype,"imageFormat",void 0),i([j("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([p()],r.prototype,"imageTransparency",void 0),i([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([p(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([p()],r.prototype,"sourceJSON",void 0),i([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([V("sublayers",{layers:{type:[D]},visibleLayers:{type:[N]}})],r.prototype,"writeSublayers",null),i([p({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),i([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([p(B)],r.prototype,"url",void 0),r=i([J("esri.layers.MapImageLayer")],r);const vt=r;export{vt as default};
